<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ritchie – Tutoriais</title><link>https://zupit.github.io/pt-br/tutoriais/</link><description>Recent content in Tutoriais on Ritchie</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://zupit.github.io/pt-br/tutoriais/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutoriais: Fórmula "Hello World"</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-executar-f%C3%B3rmulas/f%C3%B3rmula-hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-executar-f%C3%B3rmulas/f%C3%B3rmula-hello-world/</guid><description>
&lt;hr>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;strong>Premissa&lt;/strong>: Depois de finalizar os passos anteriores - &lt;a href="../../../getting-started/instalacao-cli/">&lt;strong>instalação&lt;/strong>&lt;/a> e &lt;a href="../../../getting-started/inicializacao-cli">&lt;strong>inicialização&lt;/strong>&lt;/a> -, para acessar a &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/demo/hello-world">&lt;strong>fórmula hello world&lt;/strong>&lt;/a> para testar o Ritchie, será necessário adicionar o repositório &lt;a href="https://github.com/ZupIT/ritchie-formulas-demo">&lt;strong>ritchie-formulas-demo&lt;/strong>&lt;/a> localmente.
&lt;/div>
&lt;p>Para fazer isso, você pode usar o comando &lt;strong>&lt;code>rit add repo&lt;/code>&lt;/strong>, ou executar a linha de comando abaixo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;provider&amp;#34;:&amp;#34;Github&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;demo&amp;#34;, &amp;#34;url&amp;#34;:&amp;#34;https://github.com/ZupIT/ritchie-formulas-demo&amp;#34;, &amp;#34;priority&amp;#34;:1}&amp;#39; | rit add repo --stdin
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
É possível ainda verificar os repositórios estão sendo usados executando o comando &lt;strong>&lt;code>rit list repo&lt;/code>&lt;/strong>.
&lt;/div>
&lt;p>&lt;strong>Agora que você adicionou o repositório de demo, você pode executar os comandos desse tutorial.&lt;/strong>&lt;/p>
&lt;h3 id="premissa-confere-os-detalhes-da-fórmula">&lt;strong>Premissa: Confere os detalhes da fórmula&lt;/strong>&lt;/h3>
&lt;p>Para obter os detalhes de uso de uma fórmula, é possível executar o comando usando a flag &lt;strong>&lt;code>--help&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit demo hello-world --help
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O retorno informará todas as flags disponíveis para a execução do comando.&lt;/p>
&lt;p>&lt;strong>No Ritchie, é possível, você tem 6 possibilidades de rodar uma fórmula através dessas flags:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Via Prompt&lt;/li>
&lt;li>Via Prompt e Docker&lt;/li>
&lt;li>Via Input Flags&lt;/li>
&lt;li>Via Input Flags e Docker&lt;/li>
&lt;li>Via Stdin&lt;/li>
&lt;li>Via Stdin e Docker&lt;/li>
&lt;/ol>
&lt;p>Para isso, escreva um dos comandos abaixo:&lt;/p>
&lt;h3 id="caso-1-usando-prompt">Caso 1: Usando Prompt&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
Como &lt;strong>essa fórmula foi desenvolvida usando Golang&lt;/strong>, é preciso ter &lt;strong>Golang&lt;/strong> instalado para conseguir executá-la &lt;strong>localmente&lt;/strong>.
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit demo hello-world
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Selecione uma opção para cada parâmetro de entrada e veja a mágica acontecer:&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/large-gif-1054x366-%20%281%29.gif" alt="rit demo hello-world">&lt;/p>
&lt;p>Essa é a execução padrão de linhas de comando no Ritchie, executando fórmulas localmente através de &lt;strong>prompt&lt;/strong> (interagindo com o CLI no terminal) para informar os parâmetros de entrada.&lt;/p>
&lt;h3 id="caso-2-usando-prompt--docker">Caso 2: Usando Prompt &amp;amp; Docker&lt;/h3>
&lt;p>Você pode rodar o mesmo comando usando a flag &lt;strong>&amp;ndash;docker&lt;/strong> para executar a fórmula remotamente (em um container), mas ainda informando os parâmetros de entrada via &lt;strong>prompt&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit demo hello-world --docker
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
O &lt;strong>Docker&lt;/strong> precisa estar instalado e iniciado para conseguir executar comandos usando essa flag.
Nesse caso, não é necessário ter &lt;strong>Golang&lt;/strong> instalado.
&lt;/div>
&lt;h3 id="caso-3-usando-input-flags">Caso 3: Usando Input Flags&lt;/h3>
&lt;p>Você também pode executar o comando informando as entradas por meio de flags (você pode saber quais flags estão disponíveis usando a flag &lt;strong>&lt;code>--help&lt;/code>&lt;/strong> ao executar um comando). Desta forma, os parâmetros de entradas são informados diretamente na linha de comando.&lt;/p>
&lt;pre>&lt;code>rit demo hello-world --rit_input_text=Dennis --rit_input_boolean=true --rit_input_list=everything --rit_input_password=Ritchie
&lt;/code>&lt;/pre>&lt;h3 id="caso-4-usando-input-flags--docker">Caso 4: Usando Input Flags &amp;amp; Docker&lt;/h3>
&lt;p>Ao combinar os &lt;strong>&lt;code>input flags&lt;/code>&lt;/strong> com a flag do &lt;strong>&lt;code>--docker&lt;/code>&lt;/strong>, é possível executar um comando remotamente (em um contêiner) com os parâmetros de entrada informados diretamente na linha de comando:&lt;/p>
&lt;pre>&lt;code>rit demo hello-world --rit_input_text=Dennis --rit_input_boolean=true --rit_input_list=everything --rit_input_password=Ritchie --docker
&lt;/code>&lt;/pre>&lt;h3 id="caso-5-usando-stdin">Caso 5: Usando Stdin&lt;/h3>
&lt;p>É também possível executar comando usando a flag &lt;strong>&amp;ndash;stdin&lt;/strong> (Standard Input). Dessa maneira, os parâmetros de entrada podem ser informados diretamente na linha de comando inicial:&lt;/p>
&lt;pre>&lt;code>echo '{&amp;quot;rit_input_text&amp;quot;:&amp;quot;Dennis&amp;quot;, &amp;quot;rit_input_boolean&amp;quot;:&amp;quot;true&amp;quot;, &amp;quot;rit_input_list&amp;quot;:&amp;quot;everything&amp;quot;, &amp;quot;rit_input_password&amp;quot;:&amp;quot;Ritchie&amp;quot;}' | rit demo hello-world --stdin
&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning" role="alert">
Ritchie usa o formato &lt;strong>JSON&lt;/strong> para executar comandos STDIN.
&lt;/div>
&lt;h3 id="caso-6-usando-stdin--docker">Caso 6: Usando Stdin &amp;amp; Docker&lt;/h3>
&lt;p>Quando são usadas as 2 flags &lt;strong>&amp;ndash;stdin&lt;/strong> e &lt;strong>&amp;ndash;docker&lt;/strong>, é possível executar o comando remotamente informando os parâmetros de entrada na linha de comando inicial, sem necessidade de ação humana:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;rit_input_text&amp;#34;:&amp;#34;Dennis&amp;#34;, &amp;#34;rit_input_boolean&amp;#34;:&amp;#34;true&amp;#34;, &amp;#34;rit_input_list&amp;#34;:&amp;#34;everything&amp;#34;, &amp;#34;rit_input_password&amp;#34;:&amp;#34;Ritchie&amp;#34;}&amp;#39; | rit demo hello-world --stdin --docker
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;p>Dê uma olhada nas fórmulas da comunidade (ex: &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>ritchie-formulas&lt;/strong>&lt;/a>).&lt;/p>
&lt;p>A maioria das fórmulas tem um arquivo &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/demo/hello-world">&lt;strong>README&lt;/strong>&lt;/a> explicando como executar a fórmula e para que ela serve.&lt;/p>
&lt;/div>
&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como executar uma fórmula no Ritchie. Para continuar aprendendo:&lt;/p>
&lt;p>👉Confira agora as fórmulas que você tem acesso usando o comando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit --help
&lt;/code>&lt;/pre>&lt;/div>&lt;p>👉Veja como &lt;a href="../../como-criar-formulas">&lt;strong>criar suas fórmulas&lt;/strong>&lt;/a>&lt;/p></description></item><item><title>Tutoriais: Como criar fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-criar-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-criar-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="como-criar">Como criar?&lt;/h2>
&lt;h3 id="passo-1-execute-o-comando-de-criação-de-formula">Passo 1: Execute o comando de criação de formula&lt;/h3>
&lt;p>Execute esse comando para criar uma fórmula:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit create formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Você deverá informar alguns parâmetros de entrada antes da sua execução:&lt;/p>
&lt;ol>
&lt;li>O &lt;strong>comando&lt;/strong> (de preferência, com o &lt;strong>padrão &lt;code>rit + grupo + verbo + substantivo&lt;/code>&lt;/strong> para respeitar a &lt;a href="https://docs.ritchiecli.io/v/v2.0-pt/key-concepts#arvore-de-comando">&lt;strong>árvore de comando&lt;/strong>&lt;/a>).&lt;/li>
&lt;li>A &lt;strong>linguagem de programação&lt;/strong> da fórmula.&lt;/li>
&lt;li>&lt;strong>O caminho&lt;/strong> para salvar os arquivos da fórmula.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Exemplo:&lt;/strong> &lt;code>rit demo create formula&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit_create_formula_demo.gif" alt="Exemplo de execu&amp;#xE7;&amp;#xE3;o do comando rit create formula">&lt;/p>
&lt;h3 id="passo-2-teste-sua-fórmula">&lt;strong>Passo 2: Teste sua fórmula&lt;/strong>&lt;/h3>
&lt;p>Você pode testar diretamente a fórmula depois de sua criação. Isso é possível porque o comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> também constrói a fórmula automaticamente (ela gera os arquivos executáveis da fórmula e adiciona-os no &lt;strong>.rit folder&lt;/strong>).&lt;/p>
&lt;p>Nesse caso, o template da formula &lt;strong>&amp;ldquo;Hello World&amp;rdquo;&lt;/strong> será executado como mostrado abaixo:&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit_demo_hello-world_hd.gif" alt="Exemplo demo de f&amp;#xF3;rmula &amp;quot;Hello-World&amp;quot;">&lt;/p>
&lt;p>Este template é composto por &lt;strong>3 parâmetros de entrada&lt;/strong>, que representam os tipos de inputs atualmente disponíveis para serem usados no Ritchie:&lt;/p>
&lt;ol>
&lt;li>Uma amostra da &lt;strong>&lt;code>variável de texto&lt;/code>&lt;/strong>&lt;/li>
&lt;li>Uma amostra da &lt;strong>&lt;code>lista de variáveis&lt;/code>&lt;/strong>&lt;/li>
&lt;li>Uma amostra das &lt;strong>&lt;code>variáveis booleanas&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Quando você terminar a criação da sua fórmula, ela será &amp;ldquo;buildada&amp;rdquo; e enviada para um repositório local específico de acordo com o nome do seu workspace, com o prefixo &lt;strong>&amp;ldquo;local&amp;rdquo;&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Exemplo:&lt;/strong> se tiver um workspace com o nome &lt;code>Default&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;Default&amp;#34;:&amp;#34;/home/user/ritchie-formula-local&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Um repositório associado a esse workspace será criado na pasta &lt;code>/home/user/.rit/repos&lt;/code>, e adicionado no arquivo &lt;code>repositories.json&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">[
{
&amp;#34;provider&amp;#34;: &amp;#34;Local&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;local-default&amp;#34;,
&amp;#34;version&amp;#34;: &amp;#34;0.0.0&amp;#34;,
&amp;#34;url&amp;#34;: &amp;#34;local repository&amp;#34;,
&amp;#34;priority&amp;#34;: 0,
&amp;#34;isLocal&amp;#34;: true
}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como criar e testar uma fórmula no Ritchie. Para continuar configurando a fórmula:&lt;/p>
&lt;p>👉 Vá para a seção de como&lt;a href="como-implementar-formulas/"> &lt;strong>implementar uma fórmula&lt;/strong>&lt;/a> para entender como editar os arquivos que o Ritchie cria depois da criação de uma fórmula.&lt;/p>
&lt;p>👉 Vá para &lt;a href="como-buildar-formulas">&lt;strong>como fazer o build da fórmula&lt;/strong>&lt;/a> para ver como continuar os testes nas fórmulas que você criou.&lt;/p></description></item><item><title>Tutoriais: Pasta de fórmula</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/pasta-de-f%C3%B3rmula/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/pasta-de-f%C3%B3rmula/</guid><description>
&lt;hr>
&lt;h2 id="o-que-é-uma-pasta-de-fórmula-formula-folder">O que é uma pasta de fórmula (formula folder)?&lt;/h2>
&lt;p>Esta pasta contém arquivos com comportamento da fórmula.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
A estrutura das pastas define os comandos tree, por isso &lt;strong>não é recomendando que você atualize o nome dessas pastas&lt;/strong>, ou inclua mais arquivos e/ou pastas, a menos que seja uma &lt;strong>pasta src/*.&lt;/strong>
&lt;/div>
&lt;p>Cada linguagem de programação possui suas próprias especificidades, mas a estrutura da fórmula é quase a mesma. Não importa em qual linguagem seja usada, ela irá conter:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Arquivo&lt;/th>
&lt;th style="text-align:left">Descrição&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>config.json&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para configurar os parâmetros de entrada da fórmula.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>main file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para extrair variáveis locais.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>pkg/formula file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para implementar a operação da fórmula.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>Dockerfile&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para &amp;ldquo;buildar&amp;rdquo; imagens no Docker.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>README file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para explicar o que faz uma fórmula.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>Makefile file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para compilar o código da fórmula (&lt;em>será depreciado em 03/2021&lt;/em>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>build.sh file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para compilar o código da fórmula em shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>metadata.json file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo para &amp;ldquo;taguear&amp;rdquo; informações de uma fórmula&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>set_unmask.sh file&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivo usado pelo &lt;code>Makefile file&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>help.json files&lt;/code>&lt;/td>
&lt;td style="text-align:left">arquivos usados para configurar mensagens de ajuda da fórmula no CLI.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Você pode encontrar todos os &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/templates/create_formula/languages">&lt;strong>templates de linguagens&lt;/strong>&lt;/a> no repositório ritchie-formulas.&lt;/p>
&lt;h3 id="exemplos-de-pastas-de-fórmulas">Exemplos de pastas de fórmulas&lt;/h3>
&lt;div class='code-tabs'>
&lt;ul class="nav nav-tabs">&lt;/ul>
&lt;div class="tab-content">
&lt;div class="tab-pane" title="">
&lt;p>&lt;img src="https://zupit.github.io/go%20%281%29%20%281%29%20%281%29.png" alt="">&lt;/p>
&lt;p>De acordo com a imagem acima, você deve editar os arquivos:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> alterar os &lt;em>&lt;strong>inputs&lt;/strong>&lt;/em> e suas configurações.&lt;/li>
&lt;li>&lt;strong>main.go:&lt;/strong> extrair os inputs, e chamar os métodos da fórmula (na pasta &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> implementar a lógica da fórmula.&lt;/li>
&lt;li>&lt;strong>help.json:&lt;/strong> alterar a mensagem de descrição do comando ou sub-comando.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;p>&lt;img src="https://zupit.github.io/java%20%282%29%20%282%29%20%282%29.png" alt="">&lt;/p>
&lt;p>De acordo com a imagem acima, você deve editar os arquivos:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> alterar os &lt;em>&lt;strong>inputs&lt;/strong>&lt;/em> e suas configurações.&lt;/li>
&lt;li>&lt;strong>main.java:&lt;/strong> extrair os inputs, e chamar os métodos da fórmula (na pasta &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> implementar a lógica da fórmula.&lt;/li>
&lt;li>&lt;strong>help.json:&lt;/strong> alterar a mensagem de descrição do comando ou sub-comando.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;p>&lt;img src="https://zupit.github.io/node%20%283%29%20%283%29%20%282%29.png" alt="">&lt;/p>
&lt;p>De acordo com a imagem acima, você deve editar os arquivos:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> alterar os &lt;em>&lt;strong>inputs&lt;/strong>&lt;/em> e suas configurações.&lt;/li>
&lt;li>&lt;strong>index.js:&lt;/strong> extrair os inputs, e chamar os métodos da fórmula (na pasta &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> implementar a lógica da fórmula.&lt;/li>
&lt;li>&lt;strong>help.json:&lt;/strong> alterar a mensagem de descrição do comando ou sub-comando.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;p>&lt;img src="https://zupit.github.io/python%20%282%29%20%281%29.png" alt="">&lt;/p>
&lt;p>De acordo com a imagem acima, você deve editar os arquivos:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> alterar os &lt;em>&lt;strong>inputs&lt;/strong>&lt;/em> e suas configurações.&lt;/li>
&lt;li>&lt;strong>main.py:&lt;/strong> extrair os inputs, e chamar os métodos da fórmula (na pasta &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> implementar a lógica da fórmula.&lt;/li>
&lt;li>&lt;strong>help.json:&lt;/strong> alterar a mensagem de descrição do comando ou sub-comando.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;p>&lt;img src="https://zupit.github.io/shell%20%282%29%20%281%29%20%281%29.png" alt="">&lt;/p>
&lt;p>De acordo com a imagem acima, você deve editar os arquivos:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>config.json:&lt;/strong> alterar os &lt;em>&lt;strong>inputs&lt;/strong>&lt;/em> e suas configurações.&lt;/li>
&lt;li>&lt;strong>main.sh:&lt;/strong> extrair os inputs, e chamar os métodos da fórmula (na pasta &lt;strong>formula/*&lt;/strong>).&lt;/li>
&lt;li>&lt;strong>formula/*:&lt;/strong> implementar a lógica da fórmula.&lt;/li>
&lt;li>&lt;strong>help.json:&lt;/strong> alterar a mensagem de descrição do comando ou sub-comando.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
As pastas e suas respectivas estruturas são o que definem o comando, então não é indicado alterar os nomes ou incluir mais pastas/arquivos &lt;strong>que não estejam dentro da pasta src/*&lt;/strong>.
&lt;/div></description></item><item><title>Tutoriais: Arquivo Config</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/arquivo-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/arquivo-config/</guid><description>
&lt;hr>
&lt;h2 id="o-que-é-um-arquivo-config-configjson-file">O que é um arquivo config (config.json file)?&lt;/h2>
&lt;p>O arquivo config.json contém os parâmetros de entrada da fórmula. Ele permite que o CLI saiba quais dados devem ser pedidos ao usuário quando ele executa o comando no terminal, a fim de que processe a fórmula corretamente.&lt;/p>
&lt;p>Essas entradas são feitas para os seguintes campos:&lt;/p>
&lt;ul>
&lt;li>Uma &lt;strong>imagem para buildar o docker&lt;/strong> (de acordo com a linguagem de programação escolhida para criar a fórmula)&lt;/li>
&lt;li>A lista com os parâmetros de entrada de uma fórmula.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;dockerImageBuilder&amp;#34;: &amp;#34;dockerImage&amp;#34;,
&amp;#34;inputs&amp;#34;: []
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuração-dos-parâmetros-de-entrada">Configuração dos parâmetros de entrada&lt;/h2>
&lt;p>Cada parâmetro de entrada é composto pelos seguintes campos:&lt;/p>
&lt;h3 id="campos-obrigatórios">Campos obrigatórios&lt;/h3>
&lt;ul>
&lt;li>&lt;code>name&lt;/code>: nome da variável para extração.&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;p>Uma vez que o valor de um parâmetro de entrada é informado no Ritchie CLI, ele é salvo como uma &lt;strong>variável local&lt;/strong> durante a execução da fórmula.&lt;/p>
&lt;p>O nome da variável será convertida em maiúscula como o nome da variável local.&lt;/p>
&lt;/div>
&lt;blockquote>
&lt;p>Uma boa prática é adicionar o sufixo &lt;em>&lt;strong>&lt;code>RIT_&lt;/code>&lt;/strong>&lt;/em> para cada &lt;strong>&lt;code>input name&lt;/code>&lt;/strong> para evitar conflitos com variáveis locais.&lt;/p>
&lt;p>Exemplo_: &lt;code>rit_file_name&lt;/code> &amp;ndash;&amp;gt; &lt;code>RIT_FILE_NAME&lt;/code>_&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>type&lt;/code>:
&lt;ul>
&lt;li>&lt;strong>text&lt;/strong> (string),&lt;/li>
&lt;li>&lt;strong>bool&lt;/strong> (boolean),&lt;/li>
&lt;li>&lt;strong>password&lt;/strong> (string escondida no CLI),&lt;/li>
&lt;li>&lt;strong>credentials&lt;/strong> __(tipo específico, veja mais sobre &lt;a href="https://docs.ritchiecli.io/tutorials/credentials#how-to-use-credentials-as-formula-inputs">&lt;strong>aqui&lt;/strong>&lt;/a>)&lt;/li>
&lt;li>&lt;strong>dynamic&lt;/strong> (associado ao campo opcional&lt;code>request_info&lt;/code>)&lt;/li>
&lt;li>&lt;strong>path:&lt;/strong> habilita o &lt;code>autocomplete&lt;/code> para o usuário informar o passo para uma pasta ou um arquivo (string).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>label&lt;/code>: texto que aparecerá no CLI para pedir o input ao usuário.&lt;/li>
&lt;/ul>
&lt;h4 id="exemplo-de-parâmetro-de-entrada-com-campos-obrigatórios">Exemplo de parâmetro de entrada com campos obrigatórios:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="exemplo-de-parâmetro-de-entrada-com-o-tipo-multiselect">Exemplo de parâmetro de entrada com o tipo multiselect:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Choose one or more days: &amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_days&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;multiselect&amp;#34;,
&amp;#34;required&amp;#34;: true,
&amp;#34;items&amp;#34;: [
&amp;#34;Monday&amp;#34;,
&amp;#34;Tuesday&amp;#34;,
&amp;#34;Wednesday&amp;#34;,
&amp;#34;Thursday&amp;#34;,
&amp;#34;Friday&amp;#34;,
&amp;#34;Saturday&amp;#34;,
&amp;#34;Friday&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="algumas-observações-a-respeito-o-tipo-multiselect">Algumas observações a respeito o tipo &lt;strong>&lt;code>multiselect&lt;/code>&lt;/strong>&lt;/h4>
&lt;ul>
&lt;li>Para selecionar uma das opções com tipo &lt;code>multiselect&lt;/code>, você deve apertar a chave &lt;code>space&lt;/code> (a chave&lt;code>enter&lt;/code> irá mover para o próximo parâmetro de entrada, se houver)&lt;/li>
&lt;li>As opções selecionadas no campo do tipo &lt;code>multiselect&lt;/code> irão retornar uma string com as opções separadas por barra (&lt;code>|&lt;/code>) e sem espaço, por exemplo: &lt;code>Monday | Wednesday | Friday&lt;/code>&lt;/li>
&lt;li>É sugerido que você use o campo &lt;code>obrigatório&lt;/code> como&lt;code>true&lt;/code>, caso contrário, se não houver uma opção selecionada, a variável local será salva como &lt;code>undefined&lt;/code> .&lt;/li>
&lt;/ul>
&lt;h4 id="exemplo-de-parâmetro-de-entrada-usando-o-tipo-autocomplete">Exemplo de parâmetro de entrada usando o tipo autocomplete:&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type the path to the folder with your file:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_path&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;path&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="campos-opcionais">Campos opcionais&lt;/h3>
&lt;ul>
&lt;li>&lt;code>default&lt;/code>: valor padrão do parâmetro (se nulo).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;p>Você pode ainda fazer essa configuração default com a flag default, que te permite atribuir valores default configurados na fórmula.&lt;/p>
&lt;p>Caso não haja campos com valor default, a flag continuará perguntando por parâmetros de entrada que devem ser configurados no seu arquivo config.json.&lt;/p>
&lt;/div>
&lt;ul>
&lt;li>&lt;code>required&lt;/code>: boolean que indica se um campo é obrigatório ou opcional.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;required&amp;#34;: true
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>tutorial&lt;/code>: campo de ajuda para o parâmetro de entrada &lt;em>[? for help]&lt;/em>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;tutorial&amp;#34;: &amp;#34;We are expecting you to write your name (ex: John)&amp;#34;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>items&lt;/code>: lista de opções para o parâmetro.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;Dennis&amp;#34;,
&amp;#34;John&amp;#34;,
&amp;#34;Bill&amp;#34;
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>cache&lt;/code>: salva valores de parâmetros de entrada anteriores.
&lt;ul>
&lt;li>&lt;code>active&lt;/code>: se o cache é habilitado ou não.&lt;/li>
&lt;li>&lt;code>qty&lt;/code>: quantidade de valor armazenadas no cache.&lt;/li>
&lt;li>&lt;code>newLabel&lt;/code>: texto que aparecerá no CLI para pedir um novo input ao usuário.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;cache&amp;#34;: {
&amp;#34;active&amp;#34;: true,
&amp;#34;qty&amp;#34;: 5,
&amp;#34;newLabel&amp;#34;: &amp;#34;Type another name:&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>condition&lt;/code>: esse parâmetro só aparece se condicional funcionar
&lt;ul>
&lt;li>&lt;code>variable&lt;/code>: o nome da variável usada em um parâmetro anterior para comparação.&lt;/li>
&lt;li>&lt;code>operator&lt;/code>: o operador lógico usado para comparar. Suporta &lt;code>==&lt;/code>, &lt;code>!=&lt;/code>, &lt;code>&amp;lt;&lt;/code>, &lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;lt;=&lt;/code>, and &lt;code>&amp;gt;=&lt;/code>&lt;/li>
&lt;li>&lt;code>value&lt;/code>: o valor que se deseja usar para comparação.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;default&amp;#34;: &amp;#34;Dennis&amp;#34;
},
{
&amp;#34;condition&amp;#34;: {
&amp;#34;variable&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;operator&amp;#34;: &amp;#34;!=&amp;#34;,
&amp;#34;value&amp;#34;: &amp;#34;Dennis&amp;#34;
}
&amp;#34;label&amp;#34;: &amp;#34;What is your date of birth?&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_date_of_birth&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>pattern&lt;/code>: configura a validação de um parâmetro de entrada.
&lt;ul>
&lt;li>&lt;code>regex&lt;/code>: o modelo regex para validar o parâmetro.&lt;/li>
&lt;li>&lt;code>mismatchText&lt;/code>: a mensagem de erro caso o parâmetro de entrada seja invalidado pelo regex.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;What is your age&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_age&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;pattern&amp;#34;: {
&amp;#34;regex&amp;#34;: &amp;#34;[0-9]&amp;#34;,
&amp;#34;mismatchText&amp;#34;: &amp;#34;Only a integer value is allowed here (ex: 20)&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>requestInfo&lt;/code>: configuração para ter o parâmetro de entrada de tipo dinâmico.
&lt;ul>
&lt;li>&lt;code>url&lt;/code>: URL que consome o serviço GET, responsável por retornar a lista de objetos.&lt;/li>
&lt;li>&lt;code>jsonPath&lt;/code>: caminho da variável para extrair da lista retornada uma variável de cada objeto. (Veja mais sobre &lt;a href="https://goessner.net/articles/JsonPath/">&lt;strong>como funciona esse path json&lt;/strong>&lt;/a>).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">{
&amp;#34;label&amp;#34;: &amp;#34;Type your name:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_name&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;requestInfo&amp;#34;: {
&amp;#34;url&amp;#34;: &amp;#34;https://my-url.com&amp;#34;,
&amp;#34;jsonPath&amp;#34;: $[&amp;#39;user&amp;#39;][&amp;#39;name&amp;#39;]
}
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
Cada fórmula contém quantos parâmetros de entrada forem necessários, assim como qualquer associação nos campos acima.
&lt;/div>
&lt;p>&lt;strong>Exemplo de parâmetros de entrada com campo condicional e padrão Regex:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;#34;inputs&amp;#34;: [
{
&amp;#34;label&amp;#34;: &amp;#34;Select a system:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_system&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;LINUX&amp;#34;,
&amp;#34;MACOS&amp;#34;,
&amp;#34;WINDOWS&amp;#34;
],
&amp;#34;required&amp;#34;: true,
&amp;#34;tutorial&amp;#34;: &amp;#34;Select a System from the list.&amp;#34;
},
{
&amp;#34;condition&amp;#34;: {
&amp;#34;variable&amp;#34;:&amp;#34;rit_system&amp;#34;,
&amp;#34;operator&amp;#34;:&amp;#34;==&amp;#34;,
&amp;#34;value&amp;#34;:&amp;#34;LINUX&amp;#34;
},
&amp;#34;label&amp;#34;: &amp;#34;Select a LINUX OS:&amp;#34;,
&amp;#34;name&amp;#34;: &amp;#34;rit_linux_os&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;text&amp;#34;,
&amp;#34;items&amp;#34;: [
&amp;#34;UBUNTU&amp;#34;,
&amp;#34;FEDORA&amp;#34;,
&amp;#34;CENTOS&amp;#34;
],
&amp;#34;pattern&amp;#34;: {
&amp;#34;regex&amp;#34;: &amp;#34;UBUNTU|FEDORA|CENTOS&amp;#34;,
&amp;#34;mismatchText&amp;#34;: &amp;#34;Invalid option&amp;#34;
},
&amp;#34;required&amp;#34;: false,
&amp;#34;tutorial&amp;#34;: &amp;#34;Select an Linux Operating System from the list.&amp;#34;
}
]
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
Uma vez que o valor de um parâmetro de entrada é informado no Ritchie CLI, ele é salvo como uma &lt;strong>variável local&lt;/strong> durante a execução da fórmula.
&lt;/div></description></item><item><title>Tutoriais: Arquivo Main</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/arquivo-main/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/arquivo-main/</guid><description>
&lt;hr>
&lt;h2 id="o-que-é-um-arquivo-main-main-file-a-idwhat-is-the-main-filea">O que é um arquivo main (main file)? &lt;a id="what-is-the-main-file">&lt;/a>&lt;/h2>
&lt;div class="alert alert-info" role="alert">
&lt;p>O arquivo Main é usado para extrair os parâmetros de entrada informados no arquivo config.json, salvos como variáveis locais.&lt;/p>
&lt;p>&lt;em>Os parâmetros de entrada são extraídos pelo nome do campo informado no arquivo config.json em letras maiúsculas.&lt;/em>&lt;/p>
&lt;/div>
&lt;p>Esse arquivo é também onde estão as funções da fórmula, manipulando parâmetros de entrada, que são chamados para realizar uma operação e/ou automação da fórmula.&lt;/p>
&lt;h3 id="exemplos-de-arquivo-main-a-idmain-file-examplesa">Exemplos de arquivo Main &lt;a id="main-file-examples">&lt;/a>&lt;/h3>
&lt;p>Nos exemplos abaixo, sempre há a classe de uma fórmula com uma função &lt;code>Run()&lt;/code> .&lt;/p>
&lt;div class='code-tabs'>
&lt;ul class="nav nav-tabs">&lt;/ul>
&lt;div class="tab-content">
&lt;div class="tab-pane" title="">
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text"> input2 := os.Getenv(&amp;#34;INPUT_LIST&amp;#34;)
input3, _ := strconv.ParseBool(os.Getenv(&amp;#34;INPUT_BOOLEAN&amp;#34;))
input4 := os.Getenv(&amp;#34;INPUT_PASSWORD&amp;#34;)
formula.Formula{
Text: input1,
List: input2,
Boolean: input3,
Password: input4,
}.Run(os.Stdout)
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>public class Main {
public static void main(String[] args) {
String inputText = System.getenv(&amp;quot;INPUT_TEXT&amp;quot;);
boolean inputBoolean = Boolean.parseBoolean(System.getenv(&amp;quot;INPUT_BOOLEAN&amp;quot;));
String inputList = System.getenv(&amp;quot;INPUT_LIST&amp;quot;);
String inputPassword = System.getenv(&amp;quot;INPUT_PASSWORD&amp;quot;);
Formula formula = new Formula(
inputText,
inputBoolean,
inputList,
inputPassword
);
formula.Run();
}
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>const INPUT1 = process.env.INPUT_TEXT
const INPUT2 = process.env.INPUT_BOOLEAN
const INPUT3 = process.env.INPUT_LIST
const INPUT4 = process.env.INPUT_PASSWORD
run(INPUT1, INPUT2, INPUT3, INPUT4)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>input1 = os.environ.get(&amp;quot;INPUT_TEXT&amp;quot;)
input2 = os.environ.get(&amp;quot;INPUT_BOOLEAN&amp;quot;)
input3 = os.environ.get(&amp;quot;INPUT_LIST&amp;quot;)
input4 = os.environ.get(&amp;quot;INPUT_PASSWORD&amp;quot;)
formula.Run(input1, input2, input3, input4)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>//Inputs are not even necessary here, as Shellscript get values from local variables directly.
runFormula '$SAMPLE_TEXT' $SAMPLE_LIST '$SAMPLE_BOOL''$SAMPLE_PASSWORD'
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Tutoriais: Dependências</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/depend%C3%AAncias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-implementar-f%C3%B3rmulas/depend%C3%AAncias/</guid><description>
&lt;hr>
&lt;h2 id="o-que-são-as-dependências">O que são as dependências?&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Cada linguagem de programação possui suas próprias especificidades para &lt;strong>importar bibliotecas ou pacotes&lt;/strong>.
&lt;/div>
&lt;p>No Ritchie, é possível configurar cada fórmula como um projeto pequeno e independente. Portanto, é possível importar todas as dependências necessárias para performar as operações que você deseja implementar. .&lt;/p>
&lt;div class='code-tabs'>
&lt;ul class="nav nav-tabs">&lt;/ul>
&lt;div class="tab-content">
&lt;div class="tab-pane" title="">
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">module formula
go 1.14
require (
github.com/gookit/color v1.2.5
)
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
&amp;lt;groupId&amp;gt;com.ritchie&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;formula&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
&amp;lt;maven.compiler.source&amp;gt;${java.version}&amp;lt;/maven.compiler.source&amp;gt;
&amp;lt;maven.compiler.target&amp;gt;${java.version}&amp;lt;/maven.compiler.target&amp;gt;
&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
&amp;lt;maven-jar-plugin.version&amp;gt;3.2.0&amp;lt;/maven-jar-plugin.version&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;build&amp;gt;
&amp;lt;finalName&amp;gt;Main&amp;lt;/finalName&amp;gt;
&amp;lt;plugins&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;!-- Build an executable JAR --&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${maven-jar-plugin.version}&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;archive&amp;gt;
&amp;lt;manifest&amp;gt;
&amp;lt;!-- &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt; --&amp;gt;
&amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
&amp;lt;/manifest&amp;gt;
&amp;lt;/archive&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;appendAssemblyId&amp;gt;false&amp;lt;/appendAssemblyId&amp;gt;
&amp;lt;archive&amp;gt;
&amp;lt;manifest&amp;gt;
&amp;lt;mainClass&amp;gt;com.ritchie.Main&amp;lt;/mainClass&amp;gt;
&amp;lt;/manifest&amp;gt;
&amp;lt;/archive&amp;gt;
&amp;lt;descriptorRefs&amp;gt;
&amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;
&amp;lt;/descriptorRefs&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;executions&amp;gt;
&amp;lt;execution&amp;gt;
&amp;lt;id&amp;gt;make-assembly&amp;lt;/id&amp;gt;
&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
&amp;lt;goals&amp;gt;
&amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
&amp;lt;/goals&amp;gt;
&amp;lt;/execution&amp;gt;
&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&amp;lt;dependencies&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;4.13.1&amp;lt;/version&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.github.tomas-langer&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;chalk&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>{
&amp;quot;dependencies&amp;quot;: {
&amp;quot;cli-color&amp;quot;: &amp;quot;^2.0.0&amp;quot;
},
&amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
&amp;quot;scripts&amp;quot;: {
&amp;quot;test&amp;quot;: &amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;
},
&amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>colored==1.4.2
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane" title="">
&lt;pre>&lt;code>{
&amp;quot;require&amp;quot;: {
&amp;quot;codedungeon/php-cli-colors&amp;quot;: &amp;quot;~1.0&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Tutoriais: Como "buildar" fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-buildar-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-buildar-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;div class="alert alert-danger" role="alert">
&lt;p>Essa funcionalidade não está mais disponível a partir da versão 2.5.0 do Ritchie. Isso porque o build da fórmula é feito de maneira automática: um repositório local criado assim que você implementa a fórmula&lt;/p>
&lt;p>Caso esteja usando uma versão anterior, basta seguir as orientações desta seção.&lt;/p>
&lt;/div>
&lt;h2 id="como-buildar">Como &amp;ldquo;buildar&amp;rdquo;?&lt;/h2>
&lt;p>Depois de &lt;a href="como-criar-formulas">&lt;strong>criar uma fórmula&lt;/strong>&lt;/a>, se você quiser editar o código dela, será necessário fazer o build dessas alterações para testar o comando com a nova implementação.&lt;/p>
&lt;p>Para isso, basta executar o comando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit build formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Você deverá informar:&lt;/p>
&lt;ul>
&lt;li>O &lt;strong>caminho do diretório&lt;/strong> onde a fórmula está localizada.&lt;/li>
&lt;li>O &lt;strong>caminho da fórmula&lt;/strong> a ser buildada (ele segue o comando da fórmula).&lt;/li>
&lt;/ul>
&lt;p>Caso queira atualizar o código da fórmula em tempo de execução, é possível utilizar a &lt;strong>flag “&amp;ndash;watch”&lt;/strong> junto da fórmula. Veja no exemplo abaixo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit build formula --watch
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como fazer o build de uma fórmula no Ritchie. Para continuar configurando sua fórmula:&lt;/p>
&lt;p>👉 Vá para página de como &lt;a href="como-publicar-formulas">&lt;strong>publicar uma fórmula&lt;/strong>&lt;/a> para ver como transferir seu trabalho para um repositório público.&lt;/p></description></item><item><title>Tutoriais: Como publicar fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-publicar-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-publicar-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="como-publicar">Como publicar?&lt;/h2>
&lt;p>Existe uma fórmula no Ritchie que permite você criar/atualizar o repositório de fórmulas no Github e/ou Gitblab.&lt;/p>
&lt;h3 id="premissas">Premissas&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
Para publicar um repositório, é necessário configurar as credenciais do Github e/ou Gitlab usando o comando &lt;strong>&lt;code>rit set credential.&lt;/code>&lt;/strong>
&lt;/div>
&lt;h2 id="publicando-seu-repositório">Publicando seu repositório&lt;/h2>
&lt;p>Você pode usar uma a fórmula que foi criada no repositório da comunidade para fazer:&lt;/p>
&lt;ul>
&lt;li>A inicialização em um repositório local do Git (se necessário).&lt;/li>
&lt;li>A criação do repositório no Github e/ou Gitlab,&lt;/li>
&lt;li>A geração da release de uma nova versão do repositório.&lt;/li>
&lt;li>A adição de um repositório nos repositórios locais do Ritchie (usando o comando**&lt;code>rit add repo&lt;/code>**).&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
Além disso, se o repositório já existir, a fórmula irá fazer o commit de um novo código e gerar uma nova release informada antes de atualizar os repositórios do Ritchie (usando o comando &lt;strong>&lt;code>rit update repo&lt;/code>&lt;/strong>)
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit publish repo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Você deverá informar 5 tipos diferentes de parâmetros de entrada:&lt;/p>
&lt;ol>
&lt;li>O &lt;strong>&lt;code>provedor&lt;/code>&lt;/strong> (Github ou Gitlab)&lt;/li>
&lt;li>A &lt;strong>&lt;code>privacidade do repositório&lt;/code>&lt;/strong>&lt;/li>
&lt;li>O &lt;strong>&lt;code>nome do repositório&lt;/code>&lt;/strong>&lt;/li>
&lt;li>O &lt;strong>&lt;code>caminho local do repositório&lt;/code>&lt;/strong> you wish to publish&lt;/li>
&lt;li>A &lt;strong>&lt;code>versão da release&lt;/code>&lt;/strong> para ser gerada&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zupit.github.io/rit-publish-repo.gif" alt="rit publish repo command">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Como demonstrado acima, você pode checar se a publicação deu certo usando o comando**&lt;code>rit list repo&lt;/code>** e observando se o repositório publicado aparece.
&lt;/div>
&lt;h2 id="publicando-manualmente">Publicando manualmente&lt;/h2>
&lt;p>Para publicar uma fórmula manualmente, você precisa submetê-la no repositório do &lt;strong>Github e/ou Gitlab&lt;/strong> seguindo esses passos:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Tenha um repositório de fórmulas exclusivo no Github e/ou Gitlab.&lt;/p>
&lt;p>&lt;em>Ele pode ser criado a partir de um repositório local ou de um repositório clonado.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Adicione sua fórmula ao repositório _Para isso, use o comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> ou copie /cole as pastas. _&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Faça o commit e submeta o novo código ao repositório do Github e/ou Gitlab.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Gere uma nova release do repositório de fórmulas.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como publicar fórmulas no Ritchie. Para continuar configurando sua fórmula:&lt;/p>
&lt;p>👉 Check out &lt;a href="como-compartilhar-formulas">&lt;strong>como compartilhar fórmulas&lt;/strong>&lt;/a>.&lt;/p></description></item><item><title>Tutoriais: Como compartilhar fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-compartilhar-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-compartilhar-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="como-compartilhar">Como compartilhar?&lt;/h2>
&lt;p>Depois que o repositório de fórmulas for publicado, outros usuários podem adicionar suas fórmulas localmente a partir da URL de acesso a elas.&lt;/p>
&lt;p>&lt;strong>Exemplo**: &lt;/strong>&lt;code>https://github.com/ZupIT/ritchie-formulas&lt;/code>**&lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;/a>&lt;/p>
&lt;p>Para adicionar um novo repositório no Ritchie, é necessário rodar o comando abaixo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit add repo
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uma vez que o repositório for adicionado, o Ritchie irá usar a versão da release selecionada do repositório para acessar as fórmulas disponíveis.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit-add-repo-3.gif" alt="rit add repo command demonstration">&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Note que se o repositório de fórmulas for &lt;strong>privado&lt;/strong>, será necessário informar o token do seu Github/Gitlab.
&lt;/div>
&lt;h2 id="como-checar-a-última-versão-do-repositório">Como checar a última versão do repositório?&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Essa feature está disponível a partir da versão 2.2 do Ritchie.
&lt;/div>
&lt;p>No Ritchie, é possível checar novos comandos de fórmulas adicionados e checar se há uma nova versão de algum repositório que você tenha importado localmente.&lt;/p>
&lt;p>Para isso, basta você seguir os seguintes passos:&lt;/p>
&lt;ol>
&lt;li>Executar o comando de ajuda &lt;strong>&lt;code>rit --help&lt;/code>&lt;/strong>. O sistema deve retornar a lista com grupo de repositórios disponíveis.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">(new version 2.12.1) commons repo commands:
beagle Beagle commands
bitbucket Manage bitbucket objects
clean-swift Manage clean-swift objects
docker Manipulate Docker objects
git Manipulate Git objects
github Manipulate GitHub objects
gitlab Manipulate GitLab objects
istio Istio Service Mesh commands
jupyter Manage jupyter objects
kafka Kafka commands
kubernetes Manipulate kubernetes objects
publish Publish command
scaffold Manipulate scaffold objects
xcode Manage xcode objects
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Se preferir, execute o comando &lt;strong>&lt;code>rit list repo&lt;/code>&lt;/strong>, que retorna informações dos repositórios importados, como a versão atual e a última versão disponível.&lt;/li>
&lt;/ol>
&lt;h3 id="como-atualizo">Como atualizo?&lt;/h3>
&lt;p>Para atualizar a versão de algum repositório local, você só precisa rodar o comando abaixo informando o nome do repositório e a versão desejada.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit update repo
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nesta seção, você viu como compartilhar uma fórmula no Ritchie. Para continuar configurando sua fórmula:&lt;/p>
&lt;p>👉 Vá para página &lt;a href="../../../credenciais/">&lt;strong>manipular credenciais&lt;/strong>&lt;/a> e veja como rodar esse comando com suas fórmulas.&lt;/p>
&lt;p>👉 Vá para página de &lt;a href="../../../reference/lista-de-comandos-e-flags">&lt;strong>lista de comandos&lt;/strong>&lt;/a> para ver as automações disponíveis no repositório da nossa comunidade.&lt;/p></description></item><item><title>Tutoriais: Como apagar fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-apagar-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-apagar-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="como-apagar">Como apagar?&lt;/h2>
&lt;p>Para deletar uma fórmula, você só precisa rodar o seguinte comando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit delete formula
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Feito isso, siga os passos:&lt;/p>
&lt;p>&lt;strong>Passo 1:&lt;/strong> Selecione o workspace em que está a fórmula que deseja apagar.&lt;/p>
&lt;p>&lt;strong>Passo 2:&lt;/strong> Selecione a fórmula que será apagada.&lt;/p>
&lt;p>&lt;strong>Passo 3:&lt;/strong> O Ritchie fará uma pergunta para você confirmar se deseja seguir com a operação de apagar a fórmula. Basta selecionar &amp;ldquo;sim&amp;rdquo; (yes).&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/delete-formula.gif" alt="">&lt;/p>
&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nesta seção, você viu como apagar uma fórmula no Ritchie. Para continuar lendo mais:&lt;/p>
&lt;p>👉 Vá para seção &lt;a href="como-encapsular-formulas">&lt;strong>como encapsular fórmulas&lt;/strong>&lt;/a> para descobrir como se executa uma fórmula dentro de outra fórmula.&lt;/p>
&lt;p>👉 Conheça a &lt;a href="../../../reference/lista-de-comandos-e-flags">&lt;strong>lista de comandos&lt;/strong>&lt;/a> de fórmulas disponíveis no Ritchie.&lt;/p></description></item><item><title>Tutoriais: Como encapsular fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-encapsular-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/f%C3%B3rmulas/como-encapsular-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="o-que-é-encapsulamento">O que é encapsulamento?&lt;/h2>
&lt;p>No Ritchie, é possível &lt;strong>executar fórmulas dentro de fórmulas&lt;/strong>. Esse processo é o que chamamos de &lt;strong>Encapsulamento de Fórmula&lt;/strong>.&lt;/p>
&lt;p>Essa função permite que você, por exemplo, realize operações em que é necessário rodar fórmulas consecutivas.&lt;/p>
&lt;p>A seguir, veja como você pode fazer esse processo de encapsulamento:&lt;/p>
&lt;h2 id="como-encapsular">Como encapsular?&lt;/h2>
&lt;h3 id="1-premissa">1. Premissa&lt;/h3>
&lt;p>Para realizar um encapsulamento de fórmula, é necessário usar &lt;strong>Standard Inputs&lt;/strong>. Na página a seguir, temos uma explicação mais detalhada de como ela funciona:&lt;/p>
&lt;h3 id="2-execução">2. Execução&lt;/h3>
&lt;p>Ao &lt;a href="como-implementar-formulas/">&lt;strong>implementar uma fórmula&lt;/strong>&lt;/a>, você precisa pegar o arquivo onde a operação está codificada e executar a linha de comando associada à fórmula encapsulada.&lt;/p>
&lt;p>A linha de comando da fórmula encapsulada deve ser executada utilizando &lt;strong>Standard Inputs&lt;/strong> e informando os seus parâmetros de entradas diretamente no código.&lt;/p>
&lt;h3 id="3-exemplo">3. Exemplo&lt;/h3>
&lt;p>A fórmula &lt;strong>&lt;code>rit publish repo&lt;/code>&lt;/strong> foi implementada usando o encapsulamento de fórmula. Inclusive, você pode encontrar no Github a &lt;a href="https://github.com/ZupIT/ritchie-formulas/tree/master/publish/repo">&lt;strong>implementação dessa fórmula&lt;/strong>&lt;/a>&lt;/p>
&lt;p>No exemplo abaixo, você verá como esse encapsulamento funciona na parte do código usando &lt;strong>&lt;code>Input flags&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Vale reforçar que essa fórmula foi implementada usando &lt;strong>Shell&lt;/strong>, mas o raciocínio seria o mesmo para qualquer outra linguagem de programação.
&lt;/div>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">runFormula() {
if [ &amp;#34;Github&amp;#34; == $PROVIDER ]
then
echo &amp;#34;🐙 Github provider selected&amp;#34;
rit github publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION
elif [ &amp;#34;Gitlab&amp;#34; == $PROVIDER ]
then
echo &amp;#34;🦊 Gitlab provider selected&amp;#34;
rit gitlab publish repo --privacy=$PRIVACY --project_name=$PROJECT_NAME --workspace_path=$WORKSPACE_PATH --version=$VERSION
else
echo &amp;#34;🤖 Unexpected Provider informed. Check it please and try again.&amp;#34;
fi
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Aqui, de acordo com a entrada informada pelo usuário, duas fórmulas diferentes podem ser executadas:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;code>rit github publish repo&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit gitlab publish repo&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Para tanto, os parâmetros de entrada das fórmulas encapsuladas são informados dinamicamente de acordo com os parâmetros de entrada da fórmula principal (&lt;strong>&lt;code>rit publish repo&lt;/code>&lt;/strong>).&lt;/p>
&lt;p>Dependendo da operação, os &lt;strong>&lt;code>inputs flags&lt;/code>&lt;/strong> do comando podem ser gerados de acordo com outras operações realizadas durante a execução da fórmula principal, antes de executar a linha de comando da fórmula encapsulada.&lt;/p>
&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como funciona o encapsulamento de fórmulas no Ritchie. Para continuar lendo sobre os comandos do Ritchie:&lt;/p>
&lt;p>👉 Cheque os&lt;a href="../../challenges/o-que-sao-esses-desafios"> &lt;strong>desafios&lt;/strong>&lt;/a> que criamos para você praticar as diversas funcionalidades do Ritchie.&lt;/p>
&lt;p>👉 Cheque a &lt;a href="../../../reference/lista-de-comandos-e-flags">&lt;strong>lista de comandos&lt;/strong>&lt;/a> para ver as automações disponíveis no repo da nossa comunidade.&lt;/p></description></item><item><title>Tutoriais: Como definir credenciais</title><link>https://zupit.github.io/pt-br/tutoriais/credenciais/como-definir-credenciais/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/credenciais/como-definir-credenciais/</guid><description>
&lt;hr>
&lt;p>Você pode definir as credenciais do Ritchie para não precisar ficar informando os mesmos dados diversas vezes no terminal.&lt;/p>
&lt;p>Para fazer isso, basta rodar o comando abaixo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit set credential
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O terminal irá retornar essa mensagem:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">? Select your provider [Use arrows to move, type to filter]
&amp;gt; kubeconfig
ansible
aws
github
gitlab
jenkins
Add a new
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depois que escolher um dos provedores disponíveis, o Ritchie irá solicitar que você preencha os seguintes campos:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">? Select your provider github
? username: DennisRitchie
? email: dennis.ritchie@zup.com.br
? token:
✔ Github credential saved!
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-info" role="alert">
Você pode conferir os &lt;a href="../../formulas/como-implementar-formulas/#arquivos-editaveis">&lt;strong>arquivos editáveis das fórmulas&lt;/strong>&lt;/a> para ver como &lt;strong>manipular as credenciais definidas na sessão como parâmetros de input&lt;/strong> das fórmulas (no caso, inputs no config.json).
&lt;/div></description></item><item><title>Tutoriais: Como apagar credenciais</title><link>https://zupit.github.io/pt-br/tutoriais/credenciais/como-apagar-credenciais/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/credenciais/como-apagar-credenciais/</guid><description>
&lt;hr>
&lt;h2 id="como-apagar">Como apagar?&lt;/h2>
&lt;p>Para deletar uma credencial, você só precisa rodar o seguinte comando:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit delete credential
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Veja como o processo funciona:&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/large-gif-814x408-.gif" alt="">&lt;/p>
&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nesta seção, você viu como apagar uma credencial no Ritchie. Para continuar lendo mais:&lt;/p>
&lt;p>👉 Vá para seção &lt;a href="como-adicionar-provedores">&lt;strong>como adicionar provedores&lt;/strong> &lt;/a>e, assim, continuar configurando suas credenciais.&lt;/p>
&lt;p>👉 Conheça a &lt;a href="../../../reference/lista-de-comandos-e-flags">&lt;strong>lista de comandos&lt;/strong>&lt;/a> de fórmulas disponíveis no Ritchie.&lt;/p></description></item><item><title>Tutoriais: Como adicionar provedores</title><link>https://zupit.github.io/pt-br/tutoriais/credenciais/como-adicionar-provedores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/credenciais/como-adicionar-provedores/</guid><description>
&lt;hr>
&lt;p>É possível também configurar o Ritchie para adicionar novos provedores no seu espaço de trabalho. Para fazer isso, basta selecionar a opção &amp;ldquo;&lt;strong>Add a new&lt;/strong>&amp;rdquo; rodando o comando &lt;strong>&lt;code>rit set credential&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">? Select your provider Add a new
? Define your provider name: Provider_Name
? Define your field name: (ex.:token, secretAccessKey) token
? Select your field type: secret
? Add more credentials to this provider? no
? token: *
✔ Provider_Name credential saved!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As informações que o Ritchie irá solicitar são:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Provider name:&lt;/strong> Nome do novo provedor. Você pode nomear de acordo com sua preferência&lt;/li>
&lt;li>&lt;strong>Field name:&lt;/strong> Nome da credencial que está nesse provedor.&lt;/li>
&lt;li>&lt;strong>Field type:&lt;/strong> Tipo de valor dessa credencial. Ele pode ser: &lt;strong>plain text&lt;/strong> ou &lt;strong>secret&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>Ao terminar essa configuração, você poderá configurar as credenciais seguindo as instruções acima.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Esse provedor, assim como suas informações, serão salvas de forma permanente no Ritchie. No entanto, você ainda poderá adicionar quantos provedores quiser.
&lt;/div></description></item><item><title>Tutoriais: Como usar credenciais como parâmetros de entrada</title><link>https://zupit.github.io/pt-br/tutoriais/credenciais/como-usar-credenciais-como-par%C3%A2metros-de-entrada/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/credenciais/como-usar-credenciais-como-par%C3%A2metros-de-entrada/</guid><description>
&lt;hr>
&lt;p>Assim que você configurar as credenciais do provedor, poderá usá-la como parâmetro de entrada para o arquivo &lt;strong>&lt;code>config.json&lt;/code>&lt;/strong> das suas fórmulas.&lt;/p>
&lt;p>Para fazer isso, basta usar a palavra-chave reservada:&lt;strong>&lt;code>CREDENTIAL&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Quando usada como parâmetro de entrada, a credencial terá 2 campos:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Name:&lt;/strong> Variável usada para extrair o parâmetro e manipulá-lo dentro do código da fórmula.&lt;/li>
&lt;li>&lt;strong>Type:&lt;/strong> Nomenclatura específica para o CLI saber qual credencial usar.&lt;/li>
&lt;/ol>
&lt;div class="alert alert-danger" role="alert">
O &lt;strong>tipo&lt;/strong> precisa respeitar o seguinte padrão:&lt;strong>&lt;code>CREDENTIAL_PROVIDER_VARIABLE&lt;/code>&lt;/strong>
&lt;/div>
&lt;p>Por exemplo, para usar as credenciais do &lt;strong>&lt;code>GITHUB&lt;/code>&lt;/strong> como parâmetros, você precisa informá-las no arquivo **&lt;code>config.json&lt;/code>**da fórmula:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">&amp;#34;inputs&amp;#34;: [
{
&amp;#34;name&amp;#34;: &amp;#34;git_user&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_USERNAME&amp;#34;
},
{
&amp;#34;name&amp;#34;: &amp;#34;git_email&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_EMAIL&amp;#34;
},
{
&amp;#34;name&amp;#34;: &amp;#34;git_token&amp;#34;,
&amp;#34;type&amp;#34;: &amp;#34;CREDENTIAL_GITHUB_TOKEN&amp;#34;
}
]
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Se tiver alguma dúvida com os nomes dos provedores, você pode checar uma lista de credenciais que você já configurou usando o comando abaixo:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit list credential
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Com &lt;strong>&lt;code>GITHUB&lt;/code>&lt;/strong>, o terminal irá retornar uma resposta como essa:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">PROVIDER CONTEXT CREDENTIAL
github default {&amp;#34;token&amp;#34;:&amp;#34;***&amp;#34;, &amp;#34;email&amp;#34;:&amp;#34;***&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;***&amp;#34;}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="próximos-passos">Próximos passos&lt;/h2>
&lt;p>Nessa seção, você viu como manipular credenciais no Ritchie.&lt;/p>
&lt;p>👉 Cheque a &lt;a href="https://app.gitbook.com/@zup-products/s/ritchie/~/drafts/-MDPWwvUtJ2ZZfV8Mw44/v/v2.0-pt/developer/lista-de-comandos">&lt;strong>lista de comandos&lt;/strong>&lt;/a> para ver as automações disponíveis no repo da nossa comunidade.&lt;/p></description></item><item><title>Tutoriais: Comandos Core</title><link>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-a-flag-stdin/comandos-core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-a-flag-stdin/comandos-core/</guid><description>
&lt;hr>
&lt;h2 id="comandos-core-com-stdin">Comandos Core com STDIN&lt;/h2>
&lt;p>Aqui está o JSON usado para executar os comandos core do Ritchie através do &lt;strong>stdin&lt;/strong>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
Será necessário adaptar o valor das variáveis para cada JSON retornar os resultados esperados nas operações.
&lt;/div>
&lt;h3 id="comandos-gerais">Comandos gerais&lt;/h3>
&lt;p>rit init&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;addCommons&amp;#34;:true, &amp;#34;sendMetrics&amp;#34;:true, &amp;#34;runType&amp;#34;:&amp;#34;local&amp;#34;}&amp;#39; | rit init --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit tutorial&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;tutorial&amp;#34;:&amp;#34;enabled&amp;#34;}&amp;#39; | rit tutorial --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comandos-do-repo">Comandos do Repo&lt;/h3>
&lt;p>rit add repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;provider&amp;#34;:&amp;#34;Github&amp;#34;, &amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;2.2.0&amp;#34;, &amp;#34;url&amp;#34;:&amp;#34;https://github.com/ZupIT/ritchie-formulas&amp;#34;, &amp;#34;token&amp;#34;: null, &amp;#34;priority&amp;#34;:1}&amp;#39; | rit add repo --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit update repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;, &amp;#34;version&amp;#34;:&amp;#34;2.2.0&amp;#34;}&amp;#39; | rit update repo --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit delete repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;repoName&amp;#34;}&amp;#39; | rit delete repo --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comandos-de-fórmula">Comandos de fórmula&lt;/h3>
&lt;p>rit create formula&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;formula&amp;#34;:&amp;#34;rit demo create formula&amp;#34;, &amp;#34;lang&amp;#34;:&amp;#34;shell&amp;#34;, &amp;#34;workspacePath&amp;#34;:&amp;#34;/users/dennis/home/ritchie-formulas&amp;#34;, &amp;#34;formulaPath&amp;#34;:&amp;#34;/demo/create/formula&amp;#34;}&amp;#39; | rit create formula --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit build formula&lt;/p>
&lt;div class="alert alert-danger" role="alert">
Sem suporte ainda
&lt;/div>
&lt;h3 id="comandos-de-ambiente">Comandos de Ambiente&lt;/h3>
&lt;p>rit set env&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;env&amp;#34;:&amp;#34;envName&amp;#34;}&amp;#39; | rit set env --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit delete env&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;env&amp;#34;:&amp;#34;envName&amp;#34;}&amp;#39; | rit delete env --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comandos-de-credenciais">Comandos de Credenciais&lt;/h3>
&lt;p>rit set credential&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;service&amp;#34;:&amp;#34;provider&amp;#34;, &amp;#34;type&amp;#34;:&amp;#34;type&amp;#34;, &amp;#34;credential&amp;#34;: {&amp;#34;username&amp;#34;:&amp;#34;credentialUserna
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit delete credential&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;provider&amp;#34;:&amp;#34;provider&amp;#34;}&amp;#39; | rit delete credential --stdin
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="comandos-core-sem-stdin">Comandos Core sem STDIN&lt;/h2>
&lt;p>Alguns comandos core não precisam da flag stdin para serem executados. Isso acontece porque, nesse caso, eles não precisam informar nenhum parâmetro de entrada:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>rit upgrade&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit --version&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit completion&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit list repo&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit list credential&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>rit set env&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>Tutoriais: Comandos de fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-a-flag-stdin/comandos-de-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-a-flag-stdin/comandos-de-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;p>Com fórmulas, o id do &lt;strong>JSON&lt;/strong> com a flag STDIN tem como base os &lt;strong>nomes dos parâmetros de entrada&lt;/strong> que são informados no arquivo &lt;strong>config.json&lt;/strong> no momento de implementar uma fórmula.&lt;/p>
&lt;h3 id="exemplo">&lt;strong>Exemplo&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Comando de fórmula: &lt;strong>&lt;code>rit demo formula&lt;/code>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nomes dos parâmetros de entrada que são perguntados pelo arquivo config.json:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>name&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>surname&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>dateOfBirth&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Execução da fórmula com STDIN:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">echo &amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;Dennis&amp;#34;, &amp;#34;surname&amp;#34;:&amp;#34;Ritchie&amp;#34;, &amp;#34;dateOfBirth&amp;#34;:&amp;#34;09/09/1941&amp;#34;}&amp;#39; | rit demo formula --stdin
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-danger" role="alert">
&lt;p>O comando de fórmula, através do stdin, precisa dos parâmetros de entrada que são colocados no config.json para funcionar corretamente.&lt;/p>
&lt;p>Se, durante a implementação da fórmula, for demandada uma informação via &lt;strong>prompt&lt;/strong>, não será possível usar exclusivamente o stdin para fórmula ser executada com sucesso.&lt;/p>
&lt;/div></description></item><item><title>Tutoriais: Comandos Core</title><link>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-input-flags/comandos-core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-input-flags/comandos-core/</guid><description>
&lt;hr>
&lt;h2 id="core-commands-com-input-flags">Core Commands com input flags&lt;/h2>
&lt;div class="alert alert-info" role="alert">
Estas flags estão disponíveis a partir da versão 2.8 do Ritchie.
&lt;/div>
&lt;h3 id="flags-disponíveis">Flags disponíveis&lt;/h3>
&lt;h3 id="comandos-de-credenciais">Comandos de Credenciais&lt;/h3>
&lt;p>rit set credential&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit set credential --provider=github --fields=username,token --values=Dennis,123456
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit delete credential&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit delete credential --provider=github
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comandos-de-ambiente">Comandos de Ambiente&lt;/h3>
&lt;p>rit set env&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit set env --env=prod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>rit delete env&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit delete env --env=prod
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comandos-de-repo">Comandos de Repo&lt;/h3>
&lt;p>rit add repo&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit add repo --name=Zup --provider=Github --repoUrl=https://github.com/ZupIT/ritchie-formulas-zup --tag=2.8.9 --token=1324efg
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Tutoriais: Comandos de fórmulas</title><link>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-input-flags/comandos-de-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/tutoriais/standard-inputs/como-usar-input-flags/comandos-de-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;p>Com fórmulas, as Input flags tem como base os &lt;strong>nomes dos parâmetros de entrada&lt;/strong> que são informados no arquivo &lt;strong>config.json&lt;/strong> no momento de implementar uma fórmula.&lt;/p>
&lt;h3 id="exemplo">&lt;strong>Exemplo&lt;/strong>&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>Comando de fórmula: &lt;strong>&lt;code>rit demo formula&lt;/code>&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nomes dos parâmetros de entrada que são perguntados pelo arquivo config.json:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>name&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>surname&lt;/code>&lt;/strong>&lt;/li>
&lt;li>&lt;strong>&lt;code>dateOfBirth&lt;/code>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Execução da fórmula com Input flags:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">rit demo formula --name=dennis --surname=ritchie --dateOfBirth=09/09/1941
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-danger" role="alert">
O comando de fórmula, através do input flags, precisa dos parâmetros de entrada que são colocados no config.json para funcionar corretamente.
&lt;/div></description></item></channel></rss>