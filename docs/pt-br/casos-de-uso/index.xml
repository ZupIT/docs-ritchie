<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ritchie – Casos De Uso</title><link>https://zupit.github.io/pt-br/casos-de-uso/</link><description>Recent content in Casos De Uso on Ritchie</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://zupit.github.io/pt-br/casos-de-uso/index.xml" rel="self" type="application/rss+xml"/><item><title>Casos De Uso: Contexto</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/contexto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/contexto/</guid><description>
&lt;hr>
&lt;h3 id="comando-context">&lt;strong>Comando Context&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>Comandos:&lt;/strong> &lt;em>&lt;code>rit set context&lt;/code> + &lt;code>rit show context&lt;/code> + &lt;code>rit delete context&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh6.googleusercontent.com/nSp8JByYbWSojwR4LPk-itqC8Dt23bSmFWf6wzes-oKqRkOFspjGBqNiam8eEI3YOCBp67IQaPpPKZCqXQEiBG56rqyWIAChUdNO1thIdRA46MrNMH5McpCW0zoWOFxYMVkVx2eE" alt="">&lt;/p>
&lt;p>Estes comandos são dentro dos mais úteis e simples do core do Ritchie.&lt;/p>
&lt;ul>
&lt;li>O &lt;strong>set context:&lt;/strong> permite definir um contexto na sessão. Assim, informações que serão definidas dentro desse contexto poderão ser reaproveitadas executando outros comandos precisando desse input. Esse comando possui um cache caso seja necessário voltar a aplicar um contexto já usado anteriormente.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set context
✔ Type new context?
New context: qa
Set context successful!
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;p>O motivo desse comando existir é possibilitar ao usuário ter várias credenciais cadastradas (github, aws, etc…), portanto se ele tem credencial em dev, qa e prod, por exemplo, ele pode criar esses contextos e setar suas credenciais específicas para cada um.&lt;/p>
&lt;p>Quando é usado um novo context, todas as suas credenciais devem ser setadas novamente.&lt;/p>
&lt;/div>
&lt;ul>
&lt;li>O &lt;strong>show context&lt;/strong> permite conferir qual contexto está definido atualmente na sessão.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit show context
Current context: qa
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>O &lt;strong>delete context:&lt;/strong> permite remover um contexto que foi definido na sessão (pode ser tanto um que está sendo usado no momento, ou um que foi configurado no set context anteriormente e ficou salvo no cache).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit delete context
✔ Current -&amp;gt; qa
✔ yes
Delete context successful!
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Casos De Uso: Credenciais</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/credenciais/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/credenciais/</guid><description>
&lt;hr>
&lt;h2 id="definir-credenciais">&lt;strong>Definir Credenciais&lt;/strong>&lt;/h2>
&lt;p>Comando: &lt;strong>&lt;code>$ rit set credential&lt;/code>&lt;/strong>&lt;/p>
&lt;p>Este comando permite que você configure credenciais no Ritchie, de maneira que você não precisa informar o mesmo dado diversas vezes no terminal. Lembrando que, na &lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/primeiros-passos/escolhendo-versao#versao-single">&lt;strong>Versão Single&lt;/strong>&lt;/a>, as credenciais são criptografadas localmente na sessão por meio da passphrase informada no&lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/primeiros-passos/inicializacao#versao-single"> &lt;strong>processo de inicialização&lt;/strong>&lt;/a>. Já na &lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/primeiros-passos/escolhendo-versao#versao-team">&lt;strong>Versão Team&lt;/strong>&lt;/a>, as credenciais são criptografadas na sessão online do &lt;strong>Keycloak&lt;/strong> através do &lt;strong>Vault&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
Use the arrow keys to navigate: ↓ ↑ → ←
Profile to add credential:
▸ ME (for you)
OTHER (for another user)
ORG (for the organization)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Cada um pode configurar suas próprias credenciais No caso da Versão Team, o admin do servidor pode também configurar credenciais para específicos usuários ou para toda a equipe.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
✔ ME (for you)
Use the arrow keys to navigate: ↓ ↑ → ←
Provider:
▸ darwin
email-org
github
gitlab
jenkins
kubeconfig
aws
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Depois que você selecionar as opções para cada perfil, será necessário selecionar para qual provedor deseja adicioná-los. Esta lista será organizada dentro da pasta de configuração do servidor.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
✔ ME (for you)
✔ github
Github username: user
Github token: *
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uma vez que você selecionar o provider, ele irá solicitar as informações das credenciais selecionadas:&lt;/p>
&lt;p>&lt;img src="https://lh4.googleusercontent.com/_U93uVcs1Tu9TIUy59wuVfDCKgHbqO-lt5pPPSmlmDqwaFG1oew-nG_ntixSNFVRvmknMNca0X2G5WhYAowGS84V3Bf1OCZmurcCnK-Xkn9HZkf67ZWe6Jy6Wi2f9BNL6ggdO4sI" alt="">&lt;/p>
&lt;div class="alert alert-info" role="alert">
Confere na &lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/referencia/servidor#configuracoes-de-credenciais">seção de configuração das credenciais&lt;/a> como manipular as credenciais definidas na sessão como parâmetros de entradas das fórmulas (inputs no arquivo config.json).
&lt;/div></description></item><item><title>Casos De Uso: Repositórios</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/reposit%C3%B3rios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiros-comandos/reposit%C3%B3rios/</guid><description>
&lt;hr>
&lt;h2 id="introdução">Introdução&lt;/h2>
&lt;p>Você pode ter acesso a mais de um repositório usando o Ritchie. Nos comandos abaixo, você encontra alguns recursos para gerenciar seu repo.&lt;/p>
&lt;h2 id="adicione-o-repositório-_commons_">Adicione o repositório &lt;em>Commons&lt;/em>&lt;/h2>
&lt;p>&lt;strong>As fórmulas da comunidade&lt;/strong> estão armazenadas dentro do projeto &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>ritchie-formulas&lt;/strong>&lt;/a> no &lt;strong>GitHub&lt;/strong>. Os comandos dessas fórmulas não aparecerão no helper do Ritchie executando o comando &lt;code>rit --help&lt;/code> enquanto o usuário não importará o tree.json do repositório.&lt;/p>
&lt;p>O &lt;strong>tree.json&lt;/strong> do repositório ritchie-formulas pode ser importando através da seguinte url :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Esse passo deve ser informado quando executar o comando &lt;code>rit add repo&lt;/code> para ser adicionado à árvore local do CLI.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit-add-repo-min.gif" alt="Demonstra&amp;#xE7;&amp;#xE3;o de como adicionar os comandos do reposit&amp;#xF3;rio Commons ao Ritchie">&lt;/p>
&lt;p>Depois de adicionar o tree.json do novo repositório, os comandos executáveis das fórmulas são adicionadas ao &lt;em>helper&lt;/em> do Ritchie. Isso significa que eles estão agora disponíveis para o usuário.&lt;/p>
&lt;p>Ao adicionar um novo repositório, o usuário também pode escolher a prioridade do repositório em relação aos demais, dando prioridade às fórmulas desse repositório em vez de fórmulas que usam o mesmo comando executável em outro repositório. Dessa forma, quando a CLI criar a árvore principal, não permitirá nenhum comando duplicado, sempre mantendo aquele com a prioridade mais alta.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
No momento é necessário adicionar esse repositório em ambas versões do Ritchie. Está planejado incluir esse repositório automaticamente na versão Single no futuro.
&lt;/div>
&lt;h2 id="adicione-outro-repositório">&lt;strong>Adicione outro&lt;/strong> repositório&lt;/h2>
&lt;p>Para adicionar outro repositório ao CLI, é possível seguir o mesmo processo descrito acima, exceto que é necessário ter o tree.json desse repositório armazenado em algum lugar para o Ritchie importá-lo da mesma maneira que foi feito para o projeto &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>ritchie-formulas&lt;/strong>&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit add repo
Name of the repository: community
URL of the tree [http(s)://host:port/tree.json]: https://commons-repo.ritchiecli.io/tree/tree.json
Priority [ps.: 0 is higher priority, the lower higher the priority] : 1
Repository added
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="atualizar-um-repositório">&lt;strong>Atualizar um&lt;/strong> repositório&lt;/h2>
&lt;p>É possível atualizar todos os repositórios depois de configurados, usando o comando &lt;code>rit update repo&lt;/code>. Esse comando atualizará os repositórios tree.json a partir da URL informada na adição dos repositórios.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit update repo
Wait while we update your repositories...
...Successfully got an update from the &amp;#34;commons&amp;#34; formula repository
Done.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="remover-um-repositório">&lt;strong>Remover&lt;/strong> um repositório&lt;/h2>
&lt;p>É possível remover do CLI a árvore de um repositório usando o comando &lt;code>rit delete repo&lt;/code>. O usuário precisará informar o nome que ele usou quando adicionou o repositório.&lt;/p>
&lt;p>É possível verificar o nome dos repositórios atuais usando o comando &lt;code>rit list repo&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit list repo
NAME URL
commons https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://zupit.github.io/rit-delete-repo-min.gif" alt="Demonstra&amp;#xE7;&amp;#xE3;o de como remover a &amp;#xE1;rvore do reposit&amp;#xF3;rio Commons do Ritchie">&lt;/p>
&lt;h2 id="limpar-um-repositório">&lt;strong>Limpar&lt;/strong> um repositório&lt;/h2>
&lt;p>O comando &lt;code>rit clean repo&lt;/code> permite ao usuário remover o cache do repositório informado. Dessa forma, os comandos associados não aparecerão no preenchimento automático até importar o tree.json deste repositório novamente, a próxima vez que o usuário executar uma das fórmulas do repositório.&lt;/p></description></item><item><title>Casos De Uso: Untitled</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/untitled/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/untitled/</guid><description>
&lt;hr></description></item><item><title>Casos De Uso: Docker compose</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/docker-compose/</guid><description>
&lt;hr>
&lt;h2 id="docker-compose-a-iddocker-composea">Docker compose &lt;a id="docker-compose">&lt;/a>&lt;/h2>
&lt;p>&lt;strong>Comando:&lt;/strong> &lt;em>&lt;code>rit docker generate compose&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh6.googleusercontent.com/X5kec7ahhVEKNLx8CBJZhZuX7c_yiDcRe4ZJuEcziuGYMgunrFtx82Kq56SNti6DQsB9FK0iNSOG4ALQ-qAbC6TFVllIsksWuQpeRe0jZoDO-1Bmfp2QTvyFloAyFvFG42_O0NWN" alt="">&lt;/p>
&lt;p>Este comando permite criar um arquivo &lt;strong>&lt;code>docker-compose.yml&lt;/code>&lt;/strong> na pasta onde a fórmula é executada.&lt;/p>
&lt;p>O usuário pode escolher quais ferramentas ele quer incluir no arquivo a partir dos inputs pedidos no terminal (se necessário, são pedidos informações adicionais).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit docker generate compose
Use the arrow keys to navigate: ↓ ↑ → ←
Select docker image:
▸ awsclivl
consul
dynamoDB
jaeger
kafka
mongo
postgres
redis
stubby4j
rabbitmq
finish!
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit docker generate compose
✔ kafka
✔ finish!
Generated files in the current directory
Run:
docker-compose up
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uma vez o arquivo criado, é possível executar ele através normalmente, via o comando &lt;strong>docker-compose up&lt;/strong>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
No caso do comando &lt;strong>docker-compose up&lt;/strong>, é necessário ter o docker instalado na sua máquina.
&lt;/div></description></item><item><title>Casos De Uso: Spring starter</title><link>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/spring-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/primeiras-f%C3%B3rmulas/spring-starter/</guid><description>
&lt;hr>
&lt;h2 id="spring-starter">Spring starter&lt;/h2>
&lt;p>&lt;strong>Comando:&lt;/strong> &lt;em>&lt;code>rit scaffold generate spring-starter&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/IeLvW38X-qEOCUtocOyHmtmCMABBXOIat9GQ6d7lH4Y7nzIcabqrIC7hTd7GfSdQe_1xijuywhgsUAvNQl8RBqsyRrVmvhTn23IlwtxUNZWgypZqtJwOFqCYYDyfBSzOOYHTbE7Q" alt="">&lt;/p>
&lt;p>Este comando permite criar um projeto usando o framework Spring no diretório onde a fórmula é executada.&lt;/p>
&lt;p>O usuário pode escolher quais entre linguagens diferentes (java, kotlin, groovy), módulos (maven, gradle) e suas versões.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit scaffold generate spring-starter
✔ maven-project
✔ java
✔ 2.2.5.BUILD-SNAPSHOT
Type your groupId[ex.: br.com.zup]: br.com.zup
Type your artifactId[ex.: demo]: dennis
Type the project`s description [ex.: project demo]: dennis description
✔ jar
✔ 11
Enter the dependencies ids [ex.: web,postgresql]. For list dependencies: &amp;#39;rit scaffold show spring-starter-dependencies&amp;#39; : web
16:03:37 Starting scaffold generation...
[ ... ]
16:03:39 Finished scaffold generation
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Uma vez que o projeto foi criado, é possível navegar entre os suas pastas para acessar diferentes arquivos (como mostrado no gif abaixo) ou abrir diretamente com algum IDE (Eclipse, IntelliJ, etc).&lt;/p>
&lt;p>&lt;img src="https://lh5.googleusercontent.com/WZULiXqsu4Ba-GWpYilBrzNFGmDE7AfGfhi-ydhymu-hroJ8GZRcjax1qbJaA5RuwHyTb_PxW1Jx5-_1tnCLGUUo_HeT7EhsHXdGqgqyjOBYiTEuzp0h34XLoObnLwfUYnJjG6bV" alt="">&lt;/p></description></item><item><title>Casos De Uso: Criando fórmulas</title><link>https://zupit.github.io/pt-br/casos-de-uso/criando-f%C3%B3rmulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/pt-br/casos-de-uso/criando-f%C3%B3rmulas/</guid><description>
&lt;hr>
&lt;h2 id="introdução">Introdução&lt;/h2>
&lt;p>O processo para criar uma fórmula é feito através do comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong>. Ele cria a estrutura necessária para o usuário começar a desenvolver uma nova fórmula em sua máquina local.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Antes de seguir as etapas para criar uma fórmula, é recomendável ter o Ritchie &lt;strong>instalado&lt;/strong> e &lt;strong>testado&lt;/strong> corretamente para garantir que todos os comandos estejam funcionando.
&lt;/div>
&lt;h2 id="passo-1-criação-da-fórmula">Passo 1: Criação da fórmula&lt;/h2>
&lt;p>Quando o comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> é executado no terminal, algumas informações são solicitadas ao usuário:&lt;/p>
&lt;ol>
&lt;li>o &lt;strong>&lt;code>novo comando&lt;/code>&lt;/strong> de fórmula&lt;/li>
&lt;/ol>
&lt;p>O ideal é seguir o padrão &lt;code>rit + grupo + verbo + substantivo&lt;/code>.&lt;/p>
&lt;ol start="2">
&lt;li>a &lt;strong>&lt;code>linguagem&lt;/code>&lt;/strong> de programação da nova fórmula&lt;/li>
&lt;/ol>
&lt;p>Um modelo Hello World será criado neste idioma.&lt;/p>
&lt;ol start="3">
&lt;li>o &lt;strong>&lt;code>espaço de trabalho (path)&lt;/code>&lt;/strong> onde a nova fórmula será adicionada&lt;/li>
&lt;/ol>
&lt;p>Pode ser um espaço de trabalho de fórmula existente. Se não houver nenhum disponível, um espaço de trabalho padrão da fórmula será criado automaticamente, denominado &lt;strong>&lt;code>ritchie-formulas-local&lt;/code>&lt;/strong> na &lt;strong>&lt;code>HOME&lt;/code>&lt;/strong> da máquina do usuário.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/large-gif-1170x398-.gif" alt="Cria&amp;#xE7;&amp;#xE3;o de uma nova f&amp;#xF3;rmula">&lt;/p>
&lt;p>O comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> também cria a fórmula automaticamente (gera os arquivos executáveis da fórmula e os adiciona à &lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/referencia/cli#o-que-compoe-a-pasta-rit">pasta .rit&lt;/a>).&lt;/p>
&lt;p>Isso significa que é possível executar o novo comando diretamente após sua criação. Nesse caso, o modelo da fórmula Hello World será executado como mostrado abaixo:&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/large-gif-776x300-.gif" alt="Execu&amp;#xE7;&amp;#xE3;o do modelo Hello World">&lt;/p>
&lt;p>Atualmente, este modelo do Hello World é composto por 3 parâmetros de entrada:&lt;/p>
&lt;ol>
&lt;li>uma variável de &lt;strong>&lt;code>texto&lt;/code>&lt;/strong>&lt;/li>
&lt;li>uma &lt;strong>&lt;code>lista&lt;/code>&lt;/strong> de variáveis de texto&lt;/li>
&lt;li>uma variável &lt;strong>&lt;code>booleana&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Esses representam os três tipos de entradas disponíveis atualmente ao usar o Ritchie.&lt;/p>
&lt;h2 id="passo-2-estrutura-da-fórmula">Passo 2: Estrutura da fórmula&lt;/h2>
&lt;p>Todas as áreas de trabalho de fórmulas do Ritchie seguem a mesma arquitetura. Você pode encontrar mais informações &lt;a href="https://docs.ritchiecli.io/v/doc-portuguese/referencia/formulas">na seção de fórmulas&lt;/a>.&lt;/p>
&lt;p>Ao executar o comando &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong>, a nova fórmula é adicionada ao espaço de trabalho informado, atualizando automaticamente a estrutura do espaço de trabalho com os arquivos de modelo do Hello World.&lt;/p>
&lt;p>&lt;img src="https://lh4.googleusercontent.com/FqaL9Tf6A110qiTZe4ERyfgHzMdFdo5yffzl5qUopDD3Cr4ukeh2TpI1dwEvrCHlRLk4aKAtqSXX9BRalPbxAdShkFSKf5VlN6Vrpvs_HYxRDfjQsEbgG_zdL0D0tKV-yqQfVn91" alt="Estrutura do reposit&amp;#xF3;rio ritchie-formula-local com o modelo para a formula rit demo create formula">&lt;/p>
&lt;h2 id="passo-3-implementação-da-fórmula">Passo 3: I&lt;strong>mplementação da fórmula&lt;/strong>&lt;/h2>
&lt;p>Com a nova estrutura de fórmula gerada com sucesso dentro da área de trabalho escolhida, é possível começar a implementar a nova automação, atualizando o modelo Hello World.&lt;/p>
&lt;p>Para implementar a operação desejada, é necessário atualizar 3 arquivos localizados dentro do pacote / src da pasta raiz da nova fórmula:&lt;/p>
&lt;ol>
&lt;li>O arquivo &lt;strong>&lt;code>config.json&lt;/code>&lt;/strong>, para configurar as entradas da fórmula.&lt;/li>
&lt;li>O arquivo &lt;strong>&lt;code>main&lt;/code>&lt;/strong> (geralmente usado para extrair essas entradas)&lt;/li>
&lt;li>Os arquivos na &lt;strong>&lt;code>pasta / pkg&lt;/code>&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;em>Observação: Dependendo do idioma escolhido, pode ser necessário atualizar mais arquivos, por exemplo, para manipular dependências.&lt;/em>&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;p>Algumas outras instruções:&lt;/p>
&lt;p>❗Não altere o nome das pastas raiz da fórmula (grupo / verbo / substantivo) sem atualizar o tree.json e o &lt;strong>Makefile&lt;/strong> (da área de trabalho) com os caminhos apropriados.&lt;/p>
&lt;p>❗O &lt;strong>tree.json&lt;/strong> e o &lt;strong>Makefile&lt;/strong> (do repositório) já foram criados / atualizados executando o comando rit create formula. Conseqüentemente, você não precisará alterá-las para poder testar a nova fórmula, mesmo depois de alterar os arquivos comentados acima.&lt;/p>
&lt;/div>
&lt;h2 id="passo-4-testar-a-nova-implementação-da-fórmula">Passo 4: Testar a nova implementação da fórmula&lt;/h2>
&lt;p>Após a implementação da nova automação, é necessário executar o comando &lt;strong>&lt;code>rit build formula&lt;/code>&lt;/strong> para atualizar os arquivos executáveis da fórmula que foram gerados em sua criação.&lt;/p>
&lt;p>Quando o comando rit build formula é executado no terminal, algumas informações são solicitadas ao usuário:&lt;/p>
&lt;ol>
&lt;li>o &lt;strong>&lt;code>espaço de trabalho (path)&lt;/code>&lt;/strong> em que a fórmula foi implementada&lt;/li>
&lt;li>o &lt;strong>&lt;code>caminho&lt;/code>&lt;/strong> para o pacote formula /src (&lt;strong>&lt;code>grupo / verbo / substantivo&lt;/code>&lt;/strong>, se esse padrão tiver sido seguido)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://zupit.github.io/large-gif-776x300-%20%281%29.gif" alt="Compila&amp;#xE7;&amp;#xE3;o da formula">&lt;/p>
&lt;p>É isso aí ! Após criar com êxito a fórmula, é possível executar o comando da fórmula novamente para ver a execução da implementação atualizada.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p>&lt;em>&lt;strong>Nota&lt;/strong>: o comando &lt;strong>&lt;code>rit build formula&lt;/code>&lt;/strong> também pode ser usado com uma flag &lt;strong>&lt;code>--watch&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;em>Usando esse sinalizador, o comando “vigia” automaticamente o pacote &lt;strong>/ src&lt;/strong> da fórmula especificada e atualiza os arquivos executáveis da fórmula se alguma alteração for salva pelo usuário.&lt;/em>&lt;/p>
&lt;/div></description></item></channel></rss>