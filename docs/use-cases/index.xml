<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ritchie – Use Cases</title><link>https://zupit.github.io/use-cases/</link><description>Recent content in Use Cases on Ritchie</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://zupit.github.io/use-cases/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Cases: Context</title><link>https://zupit.github.io/use-cases/first-commands/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/first-commands/context/</guid><description>
&lt;hr>
&lt;h2 id="context-command">Context command&lt;/h2>
&lt;p>&lt;strong>Commands :&lt;/strong> &lt;em>&lt;code>rit set context&lt;/code> + &lt;code>rit show context&lt;/code> + &lt;code>rit delete context&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh6.googleusercontent.com/nSp8JByYbWSojwR4LPk-itqC8Dt23bSmFWf6wzes-oKqRkOFspjGBqNiam8eEI3YOCBp67IQaPpPKZCqXQEiBG56rqyWIAChUdNO1thIdRA46MrNMH5McpCW0zoWOFxYMVkVx2eE" alt="">&lt;/p>
&lt;p>&lt;strong>Explanation :&lt;/strong> These commands are among the most useful and simple of the Ritchie core.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>set context&lt;/strong> allows you to define a context in the session. Thus, information that will be defined within this context can be reused by executing other commands needing this input. This command has a cache in case it is necessary to re-apply a previously used context.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set context
✔ Type new context?
New context: qa
Set context successful!
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;p>The reason for this command to exist is to enable the user to have several credentials registered (github, aws, etc &amp;hellip;), so if he has credentials in dev, qa and prod, for example, he can create these contexts and set his specific credentials for each one.&lt;/p>
&lt;p>When a new context is used, all your credentials must be set again.&lt;/p>
&lt;/div>
&lt;ul>
&lt;li>&lt;strong>show context&lt;/strong> allows you to check which context is currently defined in the session.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit show context
Current context: qa
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>delete context&lt;/strong> allows you to remove a context that was defined in the session (it can be either one that is currently being used, or one that was configured in the set context previously and was saved in the cache).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit delete context
✔ Current -&amp;gt; qa
✔ yes
Delete context successful!
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Use Cases: Credentials</title><link>https://zupit.github.io/use-cases/first-commands/credentials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/first-commands/credentials/</guid><description>
&lt;hr>
&lt;h2 id="set-credentials">Set &lt;strong>Credentials&lt;/strong>&lt;/h2>
&lt;p>It is possible to set credentials (secrets) on Ritchie to avoid informing datas multiplus times through the terminal.&lt;/p>
&lt;p>The command that will allow it is &lt;strong>&lt;code>$ rit set credential&lt;/code>&lt;/strong>&lt;/p>
&lt;p>On the &lt;a href="https://docs.ritchiecli.io/getting-started/choosing-a-version#single-version">&lt;strong>Single version&lt;/strong>&lt;/a>, credentials are encrypted locally on the session, through the passphrase informed at the &lt;a href="https://docs.ritchiecli.io/getting-started/initialization#single-version">&lt;strong>initialization step&lt;/strong>&lt;/a>.&lt;/p>
&lt;p>On the &lt;a href="https://docs.ritchiecli.io/getting-started/choosing-a-version#team-version">&lt;strong>Team&lt;/strong> &lt;strong>version&lt;/strong>&lt;/a>, credentials are encrypted on the &lt;strong>Keycloak&lt;/strong> session (online) through the &lt;strong>Vault&lt;/strong> (Hashicorp).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
Use the arrow keys to navigate: ↓ ↑ → ←
Profile to add credential:
▸ ME (for you)
OTHER (for another user)
ORG (for the organization)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every user can set his own credentials,&lt;br>
On the Team version, server admins can also set credentials for specific team users or for the whole team.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
✔ ME (for you)
Use the arrow keys to navigate: ↓ ↑ → ←
Provider:
▸ darwin
email-org
github
gitlab
jenkins
kubeconfig
aws
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the user select the profile option, he needs to select with provider he wishes to add. This provider’s list is setted inside the server configuration file.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit set credential
✔ ME (for you)
✔ github
Github username: user
Github token: *
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the user select the provider, he need to inform the selected credential’s datas.&lt;/p>
&lt;p>&lt;img src="https://lh4.googleusercontent.com/-JVtQ04rw-nThL0ALvAnk5B63942l5z9gUrjzk34TNPiPU3BNUc4aa-BFStBNO6dMJDTwBgiWr9uEg3sIwQTLiklUwqyKr5ZyWpnaHGpg4P-4GELLnmw3pPaomBM433N_bg0o" alt="">&lt;/p>
&lt;div class="alert alert-info" role="alert">
Check the &lt;a href="https://docs.ritchiecli.io/developer/server#credentials-configurations">credentials configuration section&lt;/a> to understand how to manipulate the credentials defined in the session as formula input parameters (inputs in the config.json file).
&lt;/div></description></item><item><title>Use Cases: Repositories</title><link>https://zupit.github.io/use-cases/first-commands/repositories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/first-commands/repositories/</guid><description>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>You can have access to more than one repository using Ritchie. We&amp;rsquo;ll show you some commands that you can use to manage your repo.&lt;/p>
&lt;h2 id="add-the-_commons_-repository">Add the &lt;em>commons&lt;/em> repository&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;p>The commons repo &lt;strong>is automatically added&lt;/strong> when you execute successfully the &lt;strong>rit init&lt;/strong> command.&lt;/p>
&lt;p>You can remove it using the &lt;strong>rit delete repo&lt;/strong> command explained below.&lt;/p>
&lt;/div>
&lt;p>&lt;strong>Community&amp;rsquo;s formulas&lt;/strong> are located on the &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>ritchie-formulas&lt;/strong>&lt;/a> project on &lt;strong>GitHub&lt;/strong>. Those formulas commands won&amp;rsquo;t appear when executing the &lt;code>rit --help&lt;/code> command if the user doesn&amp;rsquo;t import the &lt;strong>tree.json&lt;/strong> of this repository first.&lt;/p>
&lt;p>The tree.json of the ritchie-formulas repository is located on the following url :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This path must be informed through the &lt;code>rit add repo&lt;/code> command to be added to the local Ritchie-CLI tree. As the example below :&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit-add-repo-min.gif" alt="Example of how to add the commons repository commands to Ritchie">&lt;/p>
&lt;p>Once the new repository &lt;strong>tree.json&lt;/strong> has been added, its &lt;em>formulas executable commands&lt;/em> are added to the Ritchie helper. That means they are now available to the user.&lt;/p>
&lt;p>When adding a new repository, the user can also choose the &lt;strong>repository&amp;rsquo;s priority&lt;/strong>, giving the formulas of this repository priority over formulas which use the same executable command on another repository. That way, when the CLI will build the main tree, it won&amp;rsquo;t allow any duplicated command, but will always keep the one with the highest priority.&lt;/p>
&lt;h2 id="add-other-repositories">&lt;strong>Add other&lt;/strong> repositories&lt;/h2>
&lt;p>To add another repository to the CLI, follow the same process as above, except its necessary to have the tree.json of this repository stored somewhere for Ritchie to import it the same way it has been done for the &lt;a href="https://github.com/ZupIT/ritchie-formulas">&lt;strong>ritchie-formulas&lt;/strong>&lt;/a> project.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit add repo
Name of the repository: community
URL of the tree [http(s)://host:port/tree.json]: https://commons-repo.ritchiecli.io/tree/tree.json
Priority [ps.: 0 is higher priority, the lower higher the priority] : 1
Repository added
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="update-a-repository">&lt;strong>Update&lt;/strong> a repository&lt;/h2>
&lt;p>It is possible to update all repositories once they have been setted, using the &lt;code>rit update repo&lt;/code> command. It will update the repositories tree.json from the URL informed at the repositories additions.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit update repo
Wait while we update your repositories...
...Successfully got an update from the &amp;#34;commons&amp;#34; formula repository
Done.
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="delete-a-repository">&lt;strong>Delete&lt;/strong> a repository&lt;/h2>
&lt;p>It is possible to remove a repository tree from the CLI using the &lt;code>rit delete repo&lt;/code> command.&lt;/p>
&lt;p>The user will need to inform the name he used when he added the repository. It is possible to check the name of the current repositories using the &lt;code>rit list repo&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit list repo
NAME URL
commons https://commons-repo.ritchiecli.io/tree/tree.json
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://zupit.github.io/rit-delete-repo-min.gif" alt="Example of how to remove the commons repository commands from Ritchie">&lt;/p>
&lt;h2 id="clean-a-repository">&lt;strong>Clean&lt;/strong> a repository&lt;/h2>
&lt;p>The &lt;code>rit clean repo&lt;/code> command allows the user to remove the cache of the repository informed. That way, those commands won&amp;rsquo;t appear on the autocompletion until importing the tree.json of this repository again, next time the user will execute a formula from there.&lt;/p></description></item><item><title>Use Cases: Docker compose</title><link>https://zupit.github.io/use-cases/first-formulas/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/first-formulas/docker-compose/</guid><description>
&lt;hr>
&lt;h2 id="docker-compose">Docker compose&lt;/h2>
&lt;p>&lt;strong>Command :&lt;/strong> &lt;em>&lt;code>rit docker generate compose&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh6.googleusercontent.com/X5kec7ahhVEKNLx8CBJZhZuX7c_yiDcRe4ZJuEcziuGYMgunrFtx82Kq56SNti6DQsB9FK0iNSOG4ALQ-qAbC6TFVllIsksWuQpeRe0jZoDO-1Bmfp2QTvyFloAyFvFG42_O0NWN" alt="">&lt;/p>
&lt;p>&lt;strong>Explanation&lt;/strong> : This command allows you to create a &lt;strong>&lt;code>docker-compose.yml&lt;/code>&lt;/strong> file in the directory where the formula is executed.&lt;/p>
&lt;p>The user can choose which tools he wants to include in the file from the inputs requested in the terminal (if necessary, additional informations are requested).&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit docker generate compose
Use the arrow keys to navigate: ↓ ↑ → ←
Select docker image:
▸ awsclivl
consul
dynamoDB
jaeger
kafka
mongo
postgres
redis
stubby4j
rabbitmq
finish!
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit docker generate compose
✔ kafka
✔ finish!
Generated files in the current directory
Run:
docker-compose up
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the file is created, it is possible to run it normally, via the &lt;strong>docker-compose up&lt;/strong> command.&lt;/p>
&lt;div class="alert alert-info" role="alert">
When using docker-compose up, it is necessary to have docker installed.
&lt;/div></description></item><item><title>Use Cases: Spring starter</title><link>https://zupit.github.io/use-cases/first-formulas/spring-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/first-formulas/spring-starter/</guid><description>
&lt;hr>
&lt;h2 id="spring-starter">Spring starter&lt;/h2>
&lt;p>&lt;strong>Command :&lt;/strong> &lt;em>&lt;code>rit scaffold generate spring-starter&lt;/code>&lt;/em>&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/IeLvW38X-qEOCUtocOyHmtmCMABBXOIat9GQ6d7lH4Y7nzIcabqrIC7hTd7GfSdQe_1xijuywhgsUAvNQl8RBqsyRrVmvhTn23IlwtxUNZWgypZqtJwOFqCYYDyfBSzOOYHTbE7Q" alt="">&lt;/p>
&lt;p>&lt;strong>Explanation :&lt;/strong> This command allows you to create a project using the Spring framework in the directory where the formula is executed.&lt;/p>
&lt;p>The user can choose between different languages (java, kotlin, groovy), modules (maven, gradle) and their versions.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">➜ rit scaffold generate spring-starter
✔ maven-project
✔ java
✔ 2.2.5.BUILD-SNAPSHOT
Type your groupId[ex.: br.com.zup]: br.com.zup
Type your artifactId[ex.: demo]: dennis
Type the project`s description [ex.: project demo]: dennis description
✔ jar
✔ 11
Enter the dependencies ids [ex.: web,postgresql]. For list dependencies: &amp;#39;rit scaffold show spring-starter-dependencies&amp;#39; : web
16:03:37 Starting scaffold generation...
[ ... ]
16:03:39 Finished scaffold generation
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once the project is created, it is possible to navigate between its folders to access the different files (as shown in the animation below) or directly open it with an IDE (ex: Eclipse, IntelliJ, etc &amp;hellip;)&lt;/p>
&lt;p>&lt;img src="https://lh5.googleusercontent.com/WZULiXqsu4Ba-GWpYilBrzNFGmDE7AfGfhi-ydhymu-hroJ8GZRcjax1qbJaA5RuwHyTb_PxW1Jx5-_1tnCLGUUo_HeT7EhsHXdGqgqyjOBYiTEuzp0h34XLoObnLwfUYnJjG6bV" alt="">&lt;/p>
&lt;h3 id="heading">&lt;/h3></description></item><item><title>Use Cases: Creating formulas</title><link>https://zupit.github.io/use-cases/creating-formulas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zupit.github.io/use-cases/creating-formulas/</guid><description>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The process to create a formula it is done through the &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command. It creates the necessary structure for the user to start developing a new formula on his local machine.&lt;/p>
&lt;div class="alert alert-info" role="alert">
Before following the steps to create a formula, it is recommended to have &lt;strong>Ritchie&lt;/strong> &lt;strong>properly installed&lt;/strong> and &lt;strong>tested&lt;/strong> to make sure all the commands are working.
&lt;/div>
&lt;h2 id="step-1-formula-creation">Step 1: Formula creation&lt;/h2>
&lt;p>When the &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command is executed on the terminal, a few information are requested from the user :&lt;/p>
&lt;ol>
&lt;li>the &lt;strong>&lt;code>new formula command&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>The ideal is to follow the pattern rit + group + verb + noun.&lt;/p>
&lt;ol start="2">
&lt;li>the &lt;strong>&lt;code>new formula programming language&lt;/code>&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>A &lt;em>&lt;strong>Hello World template&lt;/strong>&lt;/em> will be created in this language.&lt;/p>
&lt;ol start="3">
&lt;li>the &lt;strong>&lt;code>workspace&lt;/code>&lt;/strong> where the new formula will be added&lt;/li>
&lt;/ol>
&lt;p>It can be an existing formula workspace. If there isn&amp;rsquo;t any available, a default formula workspace will be created automatically, named &lt;strong>&lt;code>ritchie-formulas-local&lt;/code>&lt;/strong> in the &lt;strong>HOME&lt;/strong> of the user&amp;rsquo;s machine.&lt;/p>
&lt;p>&lt;img src="https://lh5.googleusercontent.com/ZAkUuAxUQVqtusM_n3IThSnfvAy46zcmm9CwIBOvNiByqq3pN_MJZWoXQnTHzpffVtld1gjMc2pPuBaPNdgwWr1omPpAEKRLwN8rzSWUYWjXGesVZIjm5W0ZQgq0u_vUYCRpdZRc" alt="Creation of a new formula">&lt;/p>
&lt;p>The &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command also build the formula automatically (it generates the formula executables files and add them to the &lt;a href="https://docs.ritchiecli.io/developer/cli#composition-of-the-rit-folder">.rit folder&lt;/a>).&lt;/p>
&lt;p>That means it is possible to execute the new command directly after its creation. In that case, the formula &lt;em>&lt;strong>Hello World template&lt;/strong>&lt;/em> will be executed as shown below :&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/iju8Rbeh1vm7adM9d-9Y-jxDaqE93VonK3Gr2fDKZBgV0uNkJ8pn-q97zM_WFQLiQOr3cDXknfaEa6Qyb6G9Cgzfr_gFJH-LvvQa-QRAHT8Pm1TJQ_QD7JcTE6bk0964Dyn0H_NU" alt="Execution of the Hello World template">&lt;/p>
&lt;p>This &lt;em>&lt;strong>Hello World template&lt;/strong>&lt;/em> is currently composed of 3 inputs parameters :&lt;/p>
&lt;ol>
&lt;li>a sample text variable&lt;/li>
&lt;li>a sample list of variables&lt;/li>
&lt;li>a sample boolean variable&lt;/li>
&lt;/ol>
&lt;p>Those represents the 3 kinds of inputs currently available when using Ritchie.&lt;/p>
&lt;h2 id="step-2-formula-structure">&lt;strong>Step 2: Formula structure&lt;/strong>&lt;/h2>
&lt;p>All Ritchie formulas workspaces follow the same architecture, you can find more information &lt;a href="https://docs.ritchiecli.io/developer/formulas">in the formulas section&lt;/a>.&lt;/p>
&lt;p>When executing the &lt;strong>&lt;code>rit create formula&lt;/code>&lt;/strong> command, the new formula is added to the informed workspace, updating automatically the workspace structure with the &lt;em>Hello World template&lt;/em> files.&lt;/p>
&lt;p>&lt;img src="https://zupit.github.io/rit-demo-create-formula.png" alt="ritchie-formula-local repository structure with rit demo create formula Hello World template ">&lt;/p>
&lt;h2 id="step-3-formula-implementation">Step 3: &lt;strong>Formula implementation&lt;/strong>&lt;/h2>
&lt;p>With the new formula structure generated successfully inside the chosen workspace, it is possible to start implementing the new automation, updating the Hello World template.&lt;/p>
&lt;p>To implement the desired operation, it is necessary to update 3 files located inside the /src package of the new formula’s root folder :&lt;/p>
&lt;ol>
&lt;li>The formula &lt;strong>&lt;code>config.json&lt;/code>&lt;/strong>, to configure the inputs.&lt;/li>
&lt;li>The &lt;strong>&lt;code>main file&lt;/code>&lt;/strong> (generally used to extract those inputs)&lt;/li>
&lt;li>The &lt;strong>&lt;code>files in the /pkg folder&lt;/code>&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>Observation : Depending on the chosen language, it may be necessary to update more files, for example to manipulate dependencies.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;p>&lt;strong>Some other instructions:&lt;/strong>&lt;/p>
&lt;p>❗Do not change the name of the formula&amp;rsquo;s root folders (group / verb / noun) without updating the tree.json and Makefile (of the workspace) with the appropriated paths.&lt;/p>
&lt;p>❗The tree.json and Makefile (of the workspace) are already created / updated by executing the rit create formula command. Consequently, you will not need to change them to be able to test the new formula, even after changing the files commented above.&lt;/p>
&lt;/div>
&lt;h2 id="step-4-test-the-formula-new-implementation">Step 4: &lt;strong>Test the formula new implementation&lt;/strong>&lt;/h2>
&lt;p>Once the new automation has been implemented, it necessary to execute the &lt;strong>&lt;code>rit build formula&lt;/code>&lt;/strong> command to update the formula executable files which has been generated at its creation.&lt;/p>
&lt;p>When the rit build formula command is executed on the terminal, a few information are requested from the user :&lt;/p>
&lt;ol>
&lt;li>the &lt;strong>&lt;code>workspace&lt;/code>&lt;/strong> where the formula has been implemented&lt;/li>
&lt;li>the &lt;strong>&lt;code>path&lt;/code>&lt;/strong> to the formula /src package (group / verb / noun, if this pattern has been followed)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/Anz1rV6HJ3e9mwSIW3IPTK77DVuYruASkphPW-Ro8Zo9_QhMkM7alNfRtJ8o741l-I7BYrI7sBnsHNMndH1Q7lUWNDvwksLA7UEQXGZMP6XAe6lbbwhdgG12XBpocpWprVHelLH6" alt="Build of a formula">&lt;/p>
&lt;p>That’s it ! After building successfully the formula, it is possible to execute the formula command again to see the updated implementation.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;p>&lt;strong>Note&lt;/strong> : the &lt;strong>&lt;code>rit build formula&lt;/code>&lt;/strong> command can also be used with a flag &lt;strong>&lt;code>--watch&lt;/code>&lt;/strong>.&lt;/p>
&lt;p>Using this flag, the command will automatically “watch” the specified formula &lt;strong>&lt;code>/src package&lt;/code>&lt;/strong> and update the formula executable files if any change is saved by the user.&lt;/p>
&lt;/div>
&lt;div class="alert alert-danger" role="alert">
&lt;strong>Beta&lt;/strong> : Currently, the rit build formula command isn’t available on Windows for all programming languages. The Golang language is the only language supported by this command on Windows so far. However, all languages are supported on Linux and MacOs.
&lt;/div></description></item></channel></rss>